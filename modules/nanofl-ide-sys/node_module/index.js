// Generated by Haxe 4.3.3
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_rtti_CType = $hxEnums["haxe.rtti.CType"] = { __ename__:true,__constructs__:null
	,CUnknown: {_hx_name:"CUnknown",_hx_index:0,__enum__:"haxe.rtti.CType",toString:$estr}
	,CEnum: ($_=function(name,params) { return {_hx_index:1,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CEnum",$_.__params__ = ["name","params"],$_)
	,CClass: ($_=function(name,params) { return {_hx_index:2,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CClass",$_.__params__ = ["name","params"],$_)
	,CTypedef: ($_=function(name,params) { return {_hx_index:3,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CTypedef",$_.__params__ = ["name","params"],$_)
	,CFunction: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CFunction",$_.__params__ = ["args","ret"],$_)
	,CAnonymous: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAnonymous",$_.__params__ = ["fields"],$_)
	,CDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CDynamic",$_.__params__ = ["t"],$_)
	,CAbstract: ($_=function(name,params) { return {_hx_index:7,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAbstract",$_.__params__ = ["name","params"],$_)
};
haxe_rtti_CType.__constructs__ = [haxe_rtti_CType.CUnknown,haxe_rtti_CType.CEnum,haxe_rtti_CType.CClass,haxe_rtti_CType.CTypedef,haxe_rtti_CType.CFunction,haxe_rtti_CType.CAnonymous,haxe_rtti_CType.CDynamic,haxe_rtti_CType.CAbstract];
var haxe_rtti_Rights = $hxEnums["haxe.rtti.Rights"] = { __ename__:true,__constructs__:null
	,RNormal: {_hx_name:"RNormal",_hx_index:0,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RNo: {_hx_name:"RNo",_hx_index:1,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RCall: ($_=function(m) { return {_hx_index:2,m:m,__enum__:"haxe.rtti.Rights",toString:$estr}; },$_._hx_name="RCall",$_.__params__ = ["m"],$_)
	,RMethod: {_hx_name:"RMethod",_hx_index:3,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RDynamic: {_hx_name:"RDynamic",_hx_index:4,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RInline: {_hx_name:"RInline",_hx_index:5,__enum__:"haxe.rtti.Rights",toString:$estr}
};
haxe_rtti_Rights.__constructs__ = [haxe_rtti_Rights.RNormal,haxe_rtti_Rights.RNo,haxe_rtti_Rights.RCall,haxe_rtti_Rights.RMethod,haxe_rtti_Rights.RDynamic,haxe_rtti_Rights.RInline];
var haxe_rtti_TypeTree = $hxEnums["haxe.rtti.TypeTree"] = { __ename__:true,__constructs__:null
	,TPackage: ($_=function(name,full,subs) { return {_hx_index:0,name:name,full:full,subs:subs,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TPackage",$_.__params__ = ["name","full","subs"],$_)
	,TClassdecl: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TClassdecl",$_.__params__ = ["c"],$_)
	,TEnumdecl: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TEnumdecl",$_.__params__ = ["e"],$_)
	,TTypedecl: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TTypedecl",$_.__params__ = ["t"],$_)
	,TAbstractdecl: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TAbstractdecl",$_.__params__ = ["a"],$_)
};
haxe_rtti_TypeTree.__constructs__ = [haxe_rtti_TypeTree.TPackage,haxe_rtti_TypeTree.TClassdecl,haxe_rtti_TypeTree.TEnumdecl,haxe_rtti_TypeTree.TTypedecl,haxe_rtti_TypeTree.TAbstractdecl];
var haxe_rtti_Rtti = function() { };
haxe_rtti_Rtti.__name__ = "haxe.rtti.Rtti";
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) {
		throw haxe_Exception.thrown("Class " + c.__name__ + " has no RTTI information, consider adding @:rtti");
	}
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	if(infos._hx_index == 1) {
		var c = infos.c;
		return c;
	} else {
		var t = infos;
		throw haxe_Exception.thrown("Enum mismatch: expected TClassDecl but found " + Std.string(t));
	}
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
haxe_rtti_XmlParser.__name__ = "haxe.rtti.XmlParser";
haxe_rtti_XmlParser.prototype = {
	mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") {
			return [];
		}
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "null":
			return haxe_rtti_Rights.RNo;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		var tmp;
		if(c.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			tmp = c.nodeName;
		}
		throw haxe_Exception.thrown("Invalid " + tmp);
	}
	,processElement: function(x) {
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var c = x;
		var _g;
		if(c.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			_g = c.nodeName;
		}
		switch(_g) {
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(x,"m");
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(m,"e");
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				pl.push(haxe_xml_Access.get_innerHTML(p));
			}
			ml.push({ name : haxe_xml__$Access_AttribAccess.resolve(m,"n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = [];
		var m = x.elements();
		while(m.hasNext()) {
			var m1 = m.next();
			l.push(this.xclassfield(m1));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path"));
		var params = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			params.push(this.xtype(c1));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = [];
		var fields = [];
		var statics = [];
		var meta = [];
		var isInterface = x.exists("interface");
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "extends":
				if(isInterface) {
					interfaces.push(this.xpath(c1));
				} else {
					csuper = this.xpath(c1);
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "haxe_dynamic":
				var x1 = c1.firstElement();
				if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
				}
				tdynamic = this.xtype(x1);
				break;
			case "implements":
				interfaces.push(this.xpath(c1));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			default:
				if(c1.exists("static")) {
					statics.push(this.xclassfield(c1));
				} else {
					fields.push(this.xclassfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), isFinal : x.exists("final"), isInterface : isInterface, params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) {
			defPublic = false;
		}
		var e = x.elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		var c = e;
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "overloads":
				overloads = this.xoverloads(c1);
				break;
			default:
				this.xerror(c1);
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		return { name : tmp, type : t, isPublic : x.exists("public") || defPublic, isFinal : x.exists("final"), isOverride : x.exists("override"), line : haxe_xml__$Access_HasAttribAccess.resolve(x,"line") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(x,"line")) : null, doc : doc, get : haxe_xml__$Access_HasAttribAccess.resolve(x,"get") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"get")) : haxe_rtti_Rights.RNormal, set : haxe_xml__$Access_HasAttribAccess.resolve(x,"set") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"set")) : haxe_rtti_Rights.RNormal, params : haxe_xml__$Access_HasAttribAccess.resolve(x,"params") ? this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")) : [], platforms : this.defplat(), meta : meta, overloads : overloads, expr : haxe_xml__$Access_HasAttribAccess.resolve(x,"expr") ? haxe_xml__$Access_AttribAccess.resolve(x,"expr") : null};
	}
	,xenum: function(x) {
		var cl = [];
		var doc = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					cl.push(this.xenumfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var docElements = x.elementsNamed("haxe_doc");
		var xdoc = docElements.hasNext() ? docElements.next() : null;
		var meta = haxe_xml__$Access_HasNodeAccess.resolve(x,"meta") ? this.xmeta(haxe_xml__$Access_NodeAccess.resolve(x,"meta")) : [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(x,"a")) {
			var names = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var elts = x.elements();
			args = [];
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.push({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		var tmp1;
		if(xdoc == null) {
			tmp1 = null;
		} else {
			if(xdoc.nodeType != Xml.Document && xdoc.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (xdoc.nodeType == null ? "null" : XmlType.toString(xdoc.nodeType)));
			}
			tmp1 = haxe_xml_Access.get_innerData(xdoc);
		}
		return { name : tmp, args : args, doc : tmp1, meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "from":
				var t = c1.elements();
				while(t.hasNext()) {
					var t1 = t.next();
					var x1 = t1.firstElement();
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
					}
					from.push({ t : this.xtype(x1), field : haxe_xml__$Access_HasAttribAccess.resolve(t1,"field") ? haxe_xml__$Access_AttribAccess.resolve(t1,"field") : null});
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "impl":
				impl = this.xclass(haxe_xml__$Access_NodeAccess.resolve(c1,"class"));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "this":
				var x2 = c1.firstElement();
				if(x2.nodeType != Xml.Document && x2.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x2.nodeType == null ? "null" : XmlType.toString(x2.nodeType)));
				}
				athis = this.xtype(x2);
				break;
			case "to":
				var t2 = c1.elements();
				while(t2.hasNext()) {
					var t3 = t2.next();
					var x3 = t3.firstElement();
					if(x3.nodeType != Xml.Document && x3.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x3.nodeType == null ? "null" : XmlType.toString(x3.nodeType)));
					}
					to.push({ t : this.xtype(x3), field : haxe_xml__$Access_HasAttribAccess.resolve(t3,"field") ? haxe_xml__$Access_AttribAccess.resolve(t3,"field") : null});
				}
				break;
			default:
				this.xerror(c1);
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					t = this.xtype(c1);
				}
			}
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) {
			types.h[this.curplatform] = t;
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g;
		if(x.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			_g = x.nodeName;
		}
		switch(_g) {
		case "a":
			var fields = [];
			var f = x.elements();
			while(f.hasNext()) {
				var f1 = f.next();
				var f2 = this.xclassfield(f1,true);
				f2.platforms = [];
				fields.push(f2);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "d":
			var t = null;
			var tx = x.firstElement();
			if(tx != null) {
				if(tx.nodeType != Xml.Document && tx.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (tx.nodeType == null ? "null" : XmlType.toString(tx.nodeType)));
				}
				t = this.xtype(tx);
			}
			return haxe_rtti_CType.CDynamic(t);
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "f":
			var args = [];
			var aname = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var eargs_current = 0;
			var eargs_array = aname;
			var evalues = haxe_xml__$Access_HasAttribAccess.resolve(x,"v") ? new haxe_iterators_ArrayIterator(haxe_xml__$Access_AttribAccess.resolve(x,"v").split(":")) : null;
			var e = x.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var opt = false;
				var a = eargs_current < eargs_array.length ? eargs_array[eargs_current++] : null;
				if(a == null) {
					a = "";
				}
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v = evalues == null || evalues.current >= evalues.array.length ? null : evalues.array[evalues.current++];
				args.push({ name : a, opt : opt, t : this.xtype(e1), value : v == "" ? null : v});
			}
			var ret = args[args.length - 1];
			HxOverrides.remove(args,ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			p.push(this.xtype(c1));
		}
		return p;
	}
	,defplat: function() {
		var l = [];
		if(this.curplatform != null) {
			l.push(this.curplatform);
		}
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	return x;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		l.push(x1);
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.get_innerData = function(this1) {
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var it_current = 0;
	var it_array = this1.children;
	if(it_current >= it_array.length) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	var v = it_array[it_current++];
	if(it_current < it_array.length) {
		var n = it_array[it_current++];
		var tmp;
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
			if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
			}
			tmp = StringTools.trim(v.nodeValue) == "";
		} else {
			tmp = false;
		}
		if(tmp) {
			if(it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
			var n2 = it_array[it_current++];
			var tmp;
			if(n2.nodeType == Xml.PCData) {
				if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n2.nodeType == null ? "null" : XmlType.toString(n2.nodeType)));
				}
				tmp = StringTools.trim(n2.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp && it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
		}
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
	}
	return v.nodeValue;
};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_injecting_Injector = function() {
	this.singletons = new Map();
};
js_injecting_Injector.__name__ = "js.injecting.Injector";
js_injecting_Injector.prototype = {
	addSingleton: function(type,object) {
		var name = haxe_rtti_Rtti.getRtti(type).path;
		this.singletons.set(name,object);
	}
	,__class__: js_injecting_Injector
};
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = "js.node.buffer._Buffer.Helper";
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var nanofl_ide_sys_Clipboard = $hx_exports["Clipboard"] = function() { };
nanofl_ide_sys_Clipboard.__name__ = "nanofl.ide.sys.Clipboard";
nanofl_ide_sys_Clipboard.prototype = {
	__class__: nanofl_ide_sys_Clipboard
};
var nanofl_ide_sys_Dialogs = $hx_exports["Dialogs"] = function() { };
nanofl_ide_sys_Dialogs.__name__ = "nanofl.ide.sys.Dialogs";
nanofl_ide_sys_Dialogs.prototype = {
	__class__: nanofl_ide_sys_Dialogs
};
var nanofl_ide_sys_Environment = $hx_exports["Environment"] = function() { };
nanofl_ide_sys_Environment.__name__ = "nanofl.ide.sys.Environment";
nanofl_ide_sys_Environment.prototype = {
	__class__: nanofl_ide_sys_Environment
};
var nanofl_ide_sys_FileSystem = $hx_exports["FileSystem"] = function() { };
nanofl_ide_sys_FileSystem.__name__ = "nanofl.ide.sys.FileSystem";
nanofl_ide_sys_FileSystem.prototype = {
	__class__: nanofl_ide_sys_FileSystem
};
var nanofl_ide_sys_Folders = $hx_exports["Folders"] = function() { };
nanofl_ide_sys_Folders.__name__ = "nanofl.ide.sys.Folders";
nanofl_ide_sys_Folders.prototype = {
	__class__: nanofl_ide_sys_Folders
};
var nanofl_ide_sys_Fonts = $hx_exports["Fonts"] = function() { };
nanofl_ide_sys_Fonts.__name__ = "nanofl.ide.sys.Fonts";
nanofl_ide_sys_Fonts.prototype = {
	__class__: nanofl_ide_sys_Fonts
};
var nanofl_ide_sys_HttpUtils = $hx_exports["HttpUtils"] = function() { };
nanofl_ide_sys_HttpUtils.__name__ = "nanofl.ide.sys.HttpUtils";
nanofl_ide_sys_HttpUtils.prototype = {
	__class__: nanofl_ide_sys_HttpUtils
};
var nanofl_ide_sys_MainProcess = $hx_exports["MainProcess"] = function() { };
nanofl_ide_sys_MainProcess.__name__ = "nanofl.ide.sys.MainProcess";
nanofl_ide_sys_MainProcess.prototype = {
	__class__: nanofl_ide_sys_MainProcess
};
var nanofl_ide_sys_ProcessManager = $hx_exports["ProcessManager"] = function() { };
nanofl_ide_sys_ProcessManager.__name__ = "nanofl.ide.sys.ProcessManager";
nanofl_ide_sys_ProcessManager.prototype = {
	__class__: nanofl_ide_sys_ProcessManager
};
var nanofl_ide_sys_Shell = $hx_exports["Shell"] = function() { };
nanofl_ide_sys_Shell.__name__ = "nanofl.ide.sys.Shell";
nanofl_ide_sys_Shell.prototype = {
	__class__: nanofl_ide_sys_Shell
};
var nanofl_ide_sys_SysStuff = $hx_exports["SysStuff"] = function() { };
nanofl_ide_sys_SysStuff.__name__ = "nanofl.ide.sys.SysStuff";
nanofl_ide_sys_SysStuff.registerInInjector = function(injector) {
	var fileSystem = new nanofl_ide_sys_node_NodeFileSystem();
	var processManager = new nanofl_ide_sys_node_NodeProcessManager();
	var environment = new nanofl_ide_sys_node_NodeEnvironment();
	var folders = new nanofl_ide_sys_node_NodeFolders(environment);
	injector.addSingleton(nanofl_ide_sys_FileSystem,fileSystem);
	injector.addSingleton(nanofl_ide_sys_ProcessManager,processManager);
	injector.addSingleton(nanofl_ide_sys_Environment,environment);
	injector.addSingleton(nanofl_ide_sys_Folders,folders);
	injector.addSingleton(nanofl_ide_sys_HttpUtils,new nanofl_ide_sys_node_NodeHttpUtils());
	injector.addSingleton(nanofl_ide_sys_Zip,new nanofl_ide_sys_node_NodeZip(fileSystem,processManager,folders));
	injector.addSingleton(nanofl_ide_sys_Shell,new nanofl_ide_sys_node_NodeShell(fileSystem,processManager,environment));
	injector.addSingleton(nanofl_ide_sys_WebServerUtils,new nanofl_ide_sys_node_NodeWebServerUtils());
	injector.addSingleton(nanofl_ide_sys_Uploader,new nanofl_ide_sys_Uploader(fileSystem));
	injector.addSingleton(nanofl_ide_sys_Fonts,new nanofl_ide_sys_node_NodeFonts());
	injector.addSingleton(nanofl_ide_sys_VideoUtils,new nanofl_ide_sys_node_NodeVideoUtils(processManager,folders));
	injector.addSingleton(nanofl_ide_sys_MainProcess,new nanofl_ide_sys_node_ElectronMainProcess());
	injector.addSingleton(nanofl_ide_sys_Clipboard,new nanofl_ide_sys_node_ElectronClipboard());
	injector.addSingleton(nanofl_ide_sys_Dialogs,new nanofl_ide_sys_node_ElectronDialogs());
};
var nanofl_ide_sys_Uploader = $hx_exports["Uploader"] = function(fileSystem) {
	this.fileSystem = fileSystem;
};
nanofl_ide_sys_Uploader.__name__ = "nanofl.ide.sys.Uploader";
nanofl_ide_sys_Uploader.log = function(v,infos) {
};
nanofl_ide_sys_Uploader.prototype = {
	saveUploadedFiles: function(files,destDir) {
		var _gthis = this;
		var p = Promise.resolve(null);
		var _g = 0;
		while(_g < files.length) {
			var file = [files[_g]];
			++_g;
			p = p.then((function(file) {
				return function(_) {
					return new Promise((function(file) {
						return function(resolve,reject) {
							var reader = new FileReader();
							reader.onload = (function(file) {
								return function(_) {
									var filePath = haxe_io_Path.join([destDir,haxe_io_Path.withoutDirectory(file[0].name)]);
									_gthis.fileSystem.saveBinary(filePath,haxe_io_Bytes.ofData(reader.result));
									resolve(null);
								};
							})(file);
							reader.onerror = (function(file) {
								return function(_) {
									nanofl_ide_sys_Uploader.log("Error loading file '" + file[0].name + "' (" + Std.string(reader.error) + ").",{ fileName : "src/nanofl/ide/sys/Uploader.hx", lineNumber : 39, className : "nanofl.ide.sys.Uploader", methodName : "saveUploadedFiles"});
									resolve(null);
								};
							})(file);
							reader.readAsArrayBuffer(file[0]);
						};
					})(file));
				};
			})(file));
		}
		return p;
	}
	,__class__: nanofl_ide_sys_Uploader
};
var nanofl_ide_sys_VideoUtils = $hx_exports["VideoUtils"] = function() { };
nanofl_ide_sys_VideoUtils.__name__ = "nanofl.ide.sys.VideoUtils";
nanofl_ide_sys_VideoUtils.prototype = {
	__class__: nanofl_ide_sys_VideoUtils
};
var nanofl_ide_sys_WebServerUtils = $hx_exports["WebServerUtils"] = function() { };
nanofl_ide_sys_WebServerUtils.__name__ = "nanofl.ide.sys.WebServerUtils";
nanofl_ide_sys_WebServerUtils.prototype = {
	__class__: nanofl_ide_sys_WebServerUtils
};
var nanofl_ide_sys_Zip = $hx_exports["Zip"] = function() { };
nanofl_ide_sys_Zip.__name__ = "nanofl.ide.sys.Zip";
nanofl_ide_sys_Zip.prototype = {
	__class__: nanofl_ide_sys_Zip
};
var nanofl_ide_sys_node_ElectronClipboard = function() {
};
nanofl_ide_sys_node_ElectronClipboard.__name__ = "nanofl.ide.sys.node.ElectronClipboard";
nanofl_ide_sys_node_ElectronClipboard.prototype = {
	hasText: function() {
		var formats = nanofl_ide_sys_node_core_ElectronApi.callMethod("clipboard","availableFormats");
		return Lambda.exists(formats,function(x) {
			return StringTools.startsWith(x,"text/");
		});
	}
	,hasImage: function() {
		var formats = nanofl_ide_sys_node_core_ElectronApi.callMethod("clipboard","availableFormats");
		return Lambda.exists(formats,function(x) {
			return StringTools.startsWith(x,"image/");
		});
	}
	,readText: function() {
		return nanofl_ide_sys_node_core_ElectronApi.callMethod("clipboard","readText");
	}
	,readImageAsPngBytes: function() {
		var r = nanofl_ide_sys_node_core_ElectronApi.callMethod("clipboard","readImage");
		if(r != null) {
			return js_node_buffer__$Buffer_Helper.bytesOfBuffer(r.toPNG());
		} else {
			return null;
		}
	}
	,writeText: function(data) {
		nanofl_ide_sys_node_core_ElectronApi.callMethod("clipboard","writeText",data);
	}
	,__class__: nanofl_ide_sys_node_ElectronClipboard
};
var nanofl_ide_sys_node_ElectronDialogs = function() {
};
nanofl_ide_sys_node_ElectronDialogs.__name__ = "nanofl.ide.sys.node.ElectronDialogs";
nanofl_ide_sys_node_ElectronDialogs.prototype = {
	showOpenDialog: function(options) {
		return nanofl_ide_sys_node_core_ElectronApi.callMethodAsync("dialog","showOpenDialog",null,options);
	}
	,showSaveDialog: function(options) {
		return nanofl_ide_sys_node_core_ElectronApi.callMethodAsync("dialog","showSaveDialog",null,options);
	}
	,showMessageBox: function(options) {
		return nanofl_ide_sys_node_core_ElectronApi.callMethodAsync("dialog","showMessageBox",null,options);
	}
	,__class__: nanofl_ide_sys_node_ElectronDialogs
};
var nanofl_ide_sys_node_ElectronMainProcess = function() {
};
nanofl_ide_sys_node_ElectronMainProcess.__name__ = "nanofl.ide.sys.node.ElectronMainProcess";
nanofl_ide_sys_node_ElectronMainProcess.prototype = {
	getCommandLineArgs: function() {
		return nanofl_ide_sys_node_core_ElectronApi.getVar("process","argv").slice(1);
	}
	,__class__: nanofl_ide_sys_node_ElectronMainProcess
};
var nanofl_ide_sys_node_NodeEnvironment = function() {
};
nanofl_ide_sys_node_NodeEnvironment.__name__ = "nanofl.ide.sys.node.NodeEnvironment";
nanofl_ide_sys_node_NodeEnvironment.prototype = {
	get: function(name) {
		return nanofl_ide_sys_node_core_ElectronApi.getEnvVar(name);
	}
	,__class__: nanofl_ide_sys_node_NodeEnvironment
};
var nanofl_ide_sys_node_NodeFileSystem = function() {
};
nanofl_ide_sys_node_NodeFileSystem.__name__ = "nanofl.ide.sys.node.NodeFileSystem";
nanofl_ide_sys_node_NodeFileSystem.log = function(v,infos) {
};
nanofl_ide_sys_node_NodeFileSystem.prototype = {
	getCwd: function() {
		return nanofl_ide_sys_node_core_ElectronApi.callMethod("process","cwd");
	}
	,exists: function(path) {
		return window.electronApi.fs.existsSync(path);
	}
	,rename: function(oldPath,newPath) {
		nanofl_ide_sys_node_NodeFileSystem.log("rename " + oldPath + " => " + newPath,{ fileName : "src/nanofl/ide/sys/node/NodeFileSystem.hx", lineNumber : 28, className : "nanofl.ide.sys.node.NodeFileSystem", methodName : "rename"});
		window.electronApi.fs.renameSync(oldPath,newPath);
	}
	,isDirectory: function(path) {
		return (window.electronApi.fs.statSync(path).mode & window.electronApi.fs.constants.S_IFDIR) != 0;
	}
	,createDirectory: function(path) {
		try {
			window.electronApi.fs.mkdirSync(path);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof Error)) {
				var e = _g1;
				if(e.message != null && StringTools.startsWith(e.message,"ENOENT:")) {
					this.createDirectory(haxe_io_Path.directory(path));
					window.electronApi.fs.mkdirSync(path);
				} else {
					var stat;
					try {
						stat = window.electronApi.fs.statSync(path);
					} catch( _g1 ) {
						throw e;
					}
					if((stat.mode & window.electronApi.fs.constants.S_IFDIR) == 0) {
						throw e;
					}
				}
			} else {
				throw _g;
			}
		}
	}
	,deleteFile: function(path) {
		if(this.exists(path)) {
			window.electronApi.fs.unlinkSync(path);
		}
	}
	,deleteEmptyDirectory: function(path) {
		if(this.exists(path)) {
			window.electronApi.fs.rmdirSync(path);
		}
	}
	,readDirectory: function(path) {
		return window.electronApi.fs.readdirSync(path);
	}
	,getContent: function(filePath) {
		return window.electronApi.fs.readFileSync(filePath,{ encoding : "utf8"});
	}
	,saveContent: function(filePath,text,append) {
		var dir = haxe_io_Path.directory(filePath);
		if(dir != "") {
			this.createDirectory(dir);
		}
		if(!append) {
			window.electronApi.fs.writeFileSync(filePath,text);
		} else {
			throw new Error("Append to file is not supported.");
		}
	}
	,getBinary: function(filePath) {
		return nanofl_ide_sys_node_core_NodeBufferTools.toBytes(window.electronApi.fs.readFileSync(filePath));
	}
	,saveBinary: function(filePath,data) {
		var dir = haxe_io_Path.directory(filePath);
		if(dir != "") {
			this.createDirectory(dir);
		}
		window.electronApi.fs.writeFileSync(filePath,nanofl_ide_sys_node_core_NodeBufferTools.toBuffer(data));
	}
	,getLastModified: function(path) {
		return window.electronApi.fs.statSync(path).mtime;
	}
	,getSize: function(path) {
		return window.electronApi.fs.statSync(path).size;
	}
	,copyFile: function(srcPath,dstPath) {
		nanofl_ide_sys_node_NodeFileSystem.log("copy " + srcPath + " => " + dstPath,{ fileName : "src/nanofl/ide/sys/node/NodeFileSystem.hx", lineNumber : 118, className : "nanofl.ide.sys.node.NodeFileSystem", methodName : "copyFile"});
		var destDir = haxe_io_Path.directory(dstPath);
		if(destDir != "") {
			this.createDirectory(destDir);
		}
		window.electronApi.fs.copyFileSync(srcPath,dstPath);
	}
	,getTempFilePath: function(extensionPrefixedWithDot) {
		var tmp = extensionPrefixedWithDot;
		return nanofl_ide_sys_node_core_ElectronApi.getEnvVar("temp") + "/nanofl/" + stdlib_Uuid.newUuid() + (tmp != null ? tmp : "");
	}
	,findFiles: function(dirPath,onFile,onDir) {
		nanofl_ide_sys_tools_FileSystemTools.findFiles(this,dirPath,onFile,onDir);
	}
	,findFilesInDirectoriesFilteredByRegex: function(dirs,reFilter) {
		return nanofl_ide_sys_tools_FileSystemTools.findFilesInDirectoriesFilteredByRegex(this,dirs,reFilter);
	}
	,processFilePatternPair: function(oldName,newName,callb) {
		nanofl_ide_sys_tools_FileSystemTools.processFilePatternPair(this,oldName,newName,callb);
	}
	,processFilePattern: function(path,callb) {
		nanofl_ide_sys_tools_FileSystemTools.processFilePattern(this,path,callb);
	}
	,absolutePath: function(relPath) {
		return nanofl_ide_sys_tools_FileSystemTools.absolutePath(this,relPath);
	}
	,deleteDirectoryRecursively: function(dirPath) {
		nanofl_ide_sys_tools_FileSystemTools.deleteDirectoryRecursively(this,dirPath);
	}
	,deleteAny: function(path) {
		nanofl_ide_sys_tools_FileSystemTools.deleteAny(this,path);
	}
	,deleteAnyByPattern: function(path) {
		nanofl_ide_sys_tools_FileSystemTools.deleteAnyByPattern(this,path);
	}
	,renameByPattern: function(srcPath,destPath) {
		nanofl_ide_sys_tools_FileSystemTools.renameByPattern(this,srcPath,destPath);
	}
	,copyAny: function(srcPath,destPath) {
		nanofl_ide_sys_tools_FileSystemTools.copyAny(this,srcPath,destPath);
	}
	,copyByPattern: function(srcPath,destPath) {
		nanofl_ide_sys_tools_FileSystemTools.copyByPattern(this,srcPath,destPath);
	}
	,syncDirectory: function(src,dest) {
		nanofl_ide_sys_tools_FileSystemTools.syncDirectory(this,src,dest);
	}
	,copyLibraryFiles: function(srcLibraryDir,relativePaths,destLibraryDir) {
		nanofl_ide_sys_tools_FileSystemTools.copyLibraryFiles(this,srcLibraryDir,relativePaths,destLibraryDir);
	}
	,getDocumentLastModified: function(path) {
		return nanofl_ide_sys_tools_FileSystemTools.getDocumentLastModified(this,path);
	}
	,nativePath: function(path) {
		return nanofl_ide_sys_tools_FileSystemTools.nativePath(this,path);
	}
	,__class__: nanofl_ide_sys_node_NodeFileSystem
};
var nanofl_ide_sys_node_NodeFolders = function(environment) {
	this.environment = environment;
};
nanofl_ide_sys_node_NodeFolders.__name__ = "nanofl.ide.sys.node.NodeFolders";
nanofl_ide_sys_node_NodeFolders.prototype = {
	get_application: function() {
		return haxe_io_Path.directory(nanofl_ide_sys_node_core_ElectronApi.getVar("process","argv")[0]);
	}
	,get_tools: function() {
		return this.get_application() + "/tools";
	}
	,get_temp: function() {
		return this.environment.get("temp") + "/nanofl";
	}
	,get_plugins: function() {
		return this.get_application() + "/plugins";
	}
	,get_userDocuments: function() {
		return this.environment.get("USERPROFILE") + "/Documents";
	}
	,get_unsavedDocuments: function() {
		return this.get_temp() + "/unsaved";
	}
	,__class__: nanofl_ide_sys_node_NodeFolders
};
var nanofl_ide_sys_node_NodeFonts = function() {
};
nanofl_ide_sys_node_NodeFonts.__name__ = "nanofl.ide.sys.node.NodeFonts";
nanofl_ide_sys_node_NodeFonts.prototype = {
	getFontNames: function() {
		return ["Arial","Courier","Tahoma","Verdana"];
	}
	,__class__: nanofl_ide_sys_node_NodeFonts
};
var nanofl_ide_sys_node_NodeHttpUtils = function() {
};
nanofl_ide_sys_node_NodeHttpUtils.__name__ = "nanofl.ide.sys.node.NodeHttpUtils";
nanofl_ide_sys_node_NodeHttpUtils.prototype = {
	requestGet: function(url,headers) {
		return window.electronApi.http_utils.requestGet(url,headers);
	}
	,requestPost: function(url,headers,fields,files) {
		return window.electronApi.http_utils.requestPost(url,headers,fields,files);
	}
	,downloadFile: function(url,destFilePath,progress) {
		return window.electronApi.http_utils.downloadFile(url,destFilePath,progress);
	}
	,__class__: nanofl_ide_sys_node_NodeHttpUtils
};
var nanofl_ide_sys_node_NodeProcessManager = function() {
};
nanofl_ide_sys_node_NodeProcessManager.__name__ = "nanofl.ide.sys.node.NodeProcessManager";
nanofl_ide_sys_node_NodeProcessManager.log = function(v,infos) {
};
nanofl_ide_sys_node_NodeProcessManager.prototype = {
	run: function(filePath,args,blocking,directory,env) {
		if(blocking) {
			var options = { };
			if(directory != null) {
				options.cwd = directory;
			}
			if(env != null) {
				options.env = env;
			}
			return window.electronApi.child_process.spawnSync(filePath,args,options).status;
		} else {
			var options = { };
			if(directory != null) {
				options.cwd = directory;
			}
			if(env != null) {
				options.env = env;
			}
			options.detached = true;
			try {
				window.electronApi.child_process.spawn(filePath,args,options);
			} catch( _g ) {
				return 1;
			}
			return 0;
		}
	}
	,runCaptured: function(filePath,args,directory,env,input) {
		var options = { };
		if(directory != null) {
			options.cwd = directory;
		}
		if(env != null) {
			options.env = env;
		}
		if(input != null) {
			options.input = input;
		}
		var tmp = "ChildProcess.spawnSync " + filePath + (directory != null ? " in dir '" + directory + "'" : "");
		var result = new Array(args.length);
		var _g = 0;
		var _g1 = args.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\n\t" + args[i];
		}
		nanofl_ide_sys_node_NodeProcessManager.log(tmp + result.join(""),{ fileName : "src/nanofl/ide/sys/node/NodeProcessManager.hx", lineNumber : 44, className : "nanofl.ide.sys.node.NodeProcessManager", methodName : "runCaptured"});
		var result = window.electronApi.child_process.spawnSync(filePath,args,options);
		nanofl_ide_sys_node_NodeProcessManager.log(result,{ fileName : "src/nanofl/ide/sys/node/NodeProcessManager.hx", lineNumber : 47, className : "nanofl.ide.sys.node.NodeProcessManager", methodName : "runCaptured"});
		return { code : result.status, out : haxe_io_Bytes.ofData(result.stdout.buffer).toString(), err : haxe_io_Bytes.ofData(result.stderr.buffer).toString()};
	}
	,runPipedStdIn: function(filePath,args,directory,env,getDataForStdIn) {
		return window.electronApi.process_utils.runPipedStdIn(filePath,args,directory,env,getDataForStdIn);
	}
	,runPipedStdOut: function(filePath,args,directory,env,input,chunkSize,processChunk) {
		return window.electronApi.process_utils.runPipedStdOut(filePath,args,directory,env,input,chunkSize,processChunk);
	}
	,__class__: nanofl_ide_sys_node_NodeProcessManager
};
var nanofl_ide_sys_node_NodeShell = function(fileSystem,processManager,environment) {
	this.fileSystem = fileSystem;
	this.processManager = processManager;
	this.environment = environment;
};
nanofl_ide_sys_node_NodeShell.__name__ = "nanofl.ide.sys.node.NodeShell";
nanofl_ide_sys_node_NodeShell.log = function(v,infos) {
};
nanofl_ide_sys_node_NodeShell.prototype = {
	openInExternalBrowser: function(url) {
		nanofl_ide_sys_node_NodeShell.log("URL = " + url,{ fileName : "src/nanofl/ide/sys/node/NodeShell.hx", lineNumber : 26, className : "nanofl.ide.sys.node.NodeShell", methodName : "openInExternalBrowser"});
		window.open(url,"_blank");
	}
	,runWithEditor: function(document) {
		var winReg = new nanofl_ide_sys_node_core_NodeWindowsRegistry(($_=window.electronApi.child_process,$bind($_,$_.execSync)));
		var docType = winReg.getKeyValue("HKCR:\\." + haxe_io_Path.extension(document));
		nanofl_ide_sys_node_NodeShell.log("docType = " + docType,{ fileName : "src/nanofl/ide/sys/node/NodeShell.hx", lineNumber : 35, className : "nanofl.ide.sys.node.NodeShell", methodName : "runWithEditor"});
		if(docType == null) {
			return false;
		}
		var command = winReg.getKeyValue("HKCR:\\" + docType + "\\shell\\edit\\command");
		nanofl_ide_sys_node_NodeShell.log("command(1) = " + command,{ fileName : "src/nanofl/ide/sys/node/NodeShell.hx", lineNumber : 39, className : "nanofl.ide.sys.node.NodeShell", methodName : "runWithEditor"});
		if(command == null) {
			command = winReg.getKeyValue("HKCR:\\" + docType + "\\shell\\open\\command");
			nanofl_ide_sys_node_NodeShell.log("command(2) = " + command,{ fileName : "src/nanofl/ide/sys/node/NodeShell.hx", lineNumber : 44, className : "nanofl.ide.sys.node.NodeShell", methodName : "runWithEditor"});
		}
		if(command == null) {
			return false;
		}
		var exeAndArgs = this.parseCommand(command);
		var _g = 0;
		var _g1 = exeAndArgs.length;
		while(_g < _g1) {
			var i = _g++;
			if(exeAndArgs[i] == "%1") {
				exeAndArgs[i] = this.fileSystem.absolutePath(document);
			}
		}
		nanofl_ide_sys_node_NodeShell.log("exeAndArgs = vvvvvvvvvvvv\n" + exeAndArgs.join("\n") + "\n^^^^^^^^^^^^",{ fileName : "src/nanofl/ide/sys/node/NodeShell.hx", lineNumber : 55, className : "nanofl.ide.sys.node.NodeShell", methodName : "runWithEditor"});
		return this.processManager.run(exeAndArgs[0],exeAndArgs.slice(1),false) == 0;
	}
	,parseCommand: function(command) {
		var _gthis = this;
		command = new EReg("%([a-zA-Z0-9]+)%","g").map(command,function(re) {
			return _gthis.environment.get(re.matched(1));
		});
		var r = [];
		new EReg("\"([^\"]+?)\"|([^ \t]+)","g").map(command,function(re) {
			if(re.matched(1) != null && re.matched(1) != "") {
				r.push(re.matched(1));
			} else {
				r.push(re.matched(2));
			}
			return re.matched(0);
		});
		return r;
	}
	,__class__: nanofl_ide_sys_node_NodeShell
};
var nanofl_ide_sys_node_NodeVideoUtils = function(processManager,folders) {
	this.processManager = processManager;
	this.folders = folders;
};
nanofl_ide_sys_node_NodeVideoUtils.__name__ = "nanofl.ide.sys.node.NodeVideoUtils";
nanofl_ide_sys_node_NodeVideoUtils.prototype = {
	getFileInfo: function(filePath) {
		var r = this.processManager.runCaptured(this.folders.get_tools() + "/ffprobe.exe",["-v","quiet","-print_format","json","-show_format","-show_streams",filePath]);
		if(r.code != 0) {
			return null;
		}
		var info = JSON.parse(r.out);
		var tmp = parseFloat(info.format.duration) * 1000;
		var _this = info.streams;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = { index : x.index, type : x.codec_type, videoWidth : x.width, videoHeight : x.height, audioChannels : x.channels};
		}
		return { durationMs : tmp, streams : result};
	}
	,__class__: nanofl_ide_sys_node_NodeVideoUtils
};
var nanofl_ide_sys_node_NodeWebServerUtils = function() {
};
nanofl_ide_sys_node_NodeWebServerUtils.__name__ = "nanofl.ide.sys.node.NodeWebServerUtils";
nanofl_ide_sys_node_NodeWebServerUtils.prototype = {
	start: function(directoryToServe) {
		nanofl_ide_sys_node_NodeWebServerUtils.start_uid++;
		nanofl_ide_sys_node_core_ElectronApi.webServerStart(nanofl_ide_sys_node_NodeWebServerUtils.start_uid,directoryToServe);
		return nanofl_ide_sys_node_NodeWebServerUtils.start_uid;
	}
	,getAddress: function(pid) {
		return nanofl_ide_sys_node_core_ElectronApi.webServerGetAddress(pid);
	}
	,kill: function(pid) {
		nanofl_ide_sys_node_core_ElectronApi.webServerKill(pid);
	}
	,__class__: nanofl_ide_sys_node_NodeWebServerUtils
};
var nanofl_ide_sys_node_NodeZip = function(fileSystem,processManager,folders) {
	this.fileSystem = fileSystem;
	this.processManager = processManager;
	this.folders = folders;
};
nanofl_ide_sys_node_NodeZip.__name__ = "nanofl.ide.sys.node.NodeZip";
nanofl_ide_sys_node_NodeZip.prototype = {
	compress: function(srcDir,destZip,relFilePaths) {
		var _gthis = this;
		if(relFilePaths == null) {
			return this.processManager.run(this.folders.get_tools() + "/zip.exe",["-r",this.fileSystem.absolutePath(destZip),"."],true,srcDir) == 0;
		} else {
			var tempDir = this.folders.get_temp() + "/" + stdlib_Uuid.newUuid();
			this.fileSystem.findFiles(srcDir,function(file) {
				if(relFilePaths == null || relFilePaths.indexOf(file.substring(srcDir.length + 1)) >= 0) {
					_gthis.fileSystem.copyFile(file,tempDir + "/" + file.substring(srcDir.length + 1));
				}
			},function(dir) {
				_gthis.fileSystem.createDirectory(tempDir + "/" + dir.substring(srcDir.length + 1));
				return true;
			});
			var r = this.compress(tempDir,destZip);
			if(r) {
				this.fileSystem.deleteAny(tempDir);
			}
			return r;
		}
	}
	,decompress: function(srcZip,destDir,elevated) {
		srcZip = this.fileSystem.nativePath(srcZip);
		destDir = this.fileSystem.nativePath(destDir);
		this.fileSystem.createDirectory(destDir);
		return this.processManager.run(this.folders.get_tools() + "/unzip.exe",[srcZip,"-d",destDir],true) == 0;
	}
	,__class__: nanofl_ide_sys_node_NodeZip
};
var nanofl_ide_sys_node_core_ElectronApi = function() { };
nanofl_ide_sys_node_core_ElectronApi.__name__ = "nanofl.ide.sys.node.core.ElectronApi";
nanofl_ide_sys_node_core_ElectronApi.callMethodAsync = function(objName,methodName) {
	var $l=arguments.length;
	var args = new Array($l>2?$l-2:0);
	for(var $i=2;$i<$l;++$i){args[$i-2]=arguments[$i];}
	var argsArray = [objName,methodName].concat(args.slice());
	return window.electronApi.callMethodAsync.apply(null,argsArray);
};
nanofl_ide_sys_node_core_ElectronApi.callMethod = function(objName,methodName) {
	var $l=arguments.length;
	var args = new Array($l>2?$l-2:0);
	for(var $i=2;$i<$l;++$i){args[$i-2]=arguments[$i];}
	var argsArray = [objName,methodName].concat(args.slice());
	return window.electronApi.callMethod.apply(null,argsArray);
};
nanofl_ide_sys_node_core_ElectronApi.getVar = function(objName,varName) {
	return window.electronApi.getVar(objName,varName);
};
nanofl_ide_sys_node_core_ElectronApi.getEnvVar = function(varName) {
	return window.electronApi.getEnvVar(varName.toUpperCase());
};
nanofl_ide_sys_node_core_ElectronApi.createBuffer = function(data,byteOffset,length) {
	return window.electronApi.createBuffer(data,byteOffset,length);
};
nanofl_ide_sys_node_core_ElectronApi.webServerStart = function(uid,directoryToServe) {
	window.electronApi.webServerStart(uid,directoryToServe);
};
nanofl_ide_sys_node_core_ElectronApi.webServerGetAddress = function(uid) {
	return window.electronApi.webServerGetAddress(uid);
};
nanofl_ide_sys_node_core_ElectronApi.webServerKill = function(uid) {
	window.electronApi.webServerKill(uid);
};
var nanofl_ide_sys_node_core_NodeBufferTools = function() { };
nanofl_ide_sys_node_core_NodeBufferTools.__name__ = "nanofl.ide.sys.node.core.NodeBufferTools";
nanofl_ide_sys_node_core_NodeBufferTools.toBytes = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
nanofl_ide_sys_node_core_NodeBufferTools.toBuffer = function(b) {
	var data = b.b;
	return nanofl_ide_sys_node_core_ElectronApi.createBuffer(data.buffer,data.byteOffset,b.length);
};
var nanofl_ide_sys_node_core_NodeWindowsRegistry = function(execSync) {
	this.execSync = execSync;
};
nanofl_ide_sys_node_core_NodeWindowsRegistry.__name__ = "nanofl.ide.sys.node.core.NodeWindowsRegistry";
nanofl_ide_sys_node_core_NodeWindowsRegistry.prototype = {
	getKeyValue: function(fullKey) {
		fullKey = StringTools.replace(fullKey,"/","\\");
		var n = fullKey.lastIndexOf("\\");
		var keyPath = StringTools.replace(HxOverrides.substr(fullKey,0,n),"\\","\\\\");
		var keyName = HxOverrides.substr(fullKey,n + 1,null);
		var r = this.runPowerShell("\n            $ErrorActionPreference = 'Stop'\n            $keyPath = \"" + keyPath + "\"\n            $key = \"" + keyName + "\"\n    \n            try {\n                $value = Get-ItemProperty -Path $keyPath -Name $key\n                if ($value -ne $null) {\n                    Write-Output $value.$key\n                } else {\n                    Write-Output \"---NOT_FOUND\"\n                }\n            } catch {\n                Write-Output \"---ERROR: $_\"\n            }\n        ").toString();
		return r;
	}
	,runPowerShell: function(script) {
		var r = this.execSync(script,{ shell : "powershell.exe"});
		if(typeof(r) != "string") {
			r = r.toString();
		}
		if(r == "---NOT_FOUND") {
			return null;
		}
		if(StringTools.startsWith(r,"---ERROR:")) {
			throw new Error(r);
		}
		return r;
	}
	,__class__: nanofl_ide_sys_node_core_NodeWindowsRegistry
};
var nanofl_ide_sys_tools_FileSystemTools = function() { };
nanofl_ide_sys_tools_FileSystemTools.__name__ = "nanofl.ide.sys.tools.FileSystemTools";
nanofl_ide_sys_tools_FileSystemTools.findFiles = function(fileSystem,dirPath,onFile,onDir) {
	if(fileSystem.exists(dirPath)) {
		if(fileSystem.isDirectory(dirPath)) {
			var _g = 0;
			var _g1 = fileSystem.readDirectory(dirPath);
			while(_g < _g1.length) {
				var file = _g1[_g];
				++_g;
				if(fileSystem.isDirectory(dirPath + "/" + file)) {
					if(file != ".svn" && file != ".hg" && file != ".git") {
						if(onDir == null || onDir(dirPath + "/" + file)) {
							nanofl_ide_sys_tools_FileSystemTools.findFiles(fileSystem,dirPath + "/" + file,onFile,onDir);
						}
					}
				} else if(onFile != null) {
					onFile(dirPath + "/" + file);
				}
			}
		} else if(onFile != null) {
			onFile(dirPath);
		}
	}
};
nanofl_ide_sys_tools_FileSystemTools.findFilesInDirectoriesFilteredByRegex = function(fileSystem,dirs,reFilter) {
	var re = reFilter != null && reFilter != "" ? new EReg(reFilter,"") : null;
	var r = [];
	var _g = 0;
	var _g1 = dirs.split(";");
	while(_g < _g1.length) {
		var dir = _g1[_g];
		++_g;
		nanofl_ide_sys_tools_FileSystemTools.findFiles(fileSystem,dir,function(file) {
			if(re == null || re.match(file)) {
				r.push(file);
			}
		});
	}
	return r;
};
nanofl_ide_sys_tools_FileSystemTools.processFilePatternPair = function(fileSystem,oldName,newName,callb) {
	stdlib_Debug.assert(oldName != null,null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 58, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	stdlib_Debug.assert(oldName != "",null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 59, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	stdlib_Debug.assert(oldName != ".",null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 60, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	stdlib_Debug.assert(newName != null,null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 61, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	stdlib_Debug.assert(newName != "",null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 62, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	stdlib_Debug.assert(newName != ".",null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 63, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	stdlib_Debug.assert(!StringTools.endsWith(oldName,".*") && !StringTools.endsWith(newName,".*") || StringTools.endsWith(oldName,".*") && StringTools.endsWith(newName,".*"),null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 64, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePatternPair"});
	if(StringTools.endsWith(oldName,".*")) {
		callb(haxe_io_Path.withoutExtension(oldName),haxe_io_Path.withoutExtension(newName));
		var oldBase = haxe_io_Path.withoutDirectory(haxe_io_Path.withoutExtension(oldName));
		var newBase = haxe_io_Path.withoutDirectory(haxe_io_Path.withoutExtension(newName));
		var oldDir = haxe_io_Path.directory(oldName);
		var newDir = haxe_io_Path.directory(newName);
		if(fileSystem.exists(oldDir)) {
			var _g = 0;
			var _g1 = fileSystem.readDirectory(oldDir);
			while(_g < _g1.length) {
				var file = _g1[_g];
				++_g;
				if(StringTools.startsWith(file,oldBase + ".")) {
					callb(oldDir + "/" + file,newDir + "/" + newBase + "." + haxe_io_Path.extension(file));
				}
			}
		}
	} else {
		callb(oldName,newName);
	}
};
nanofl_ide_sys_tools_FileSystemTools.processFilePattern = function(fileSystem,path,callb) {
	stdlib_Debug.assert(path != null,null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 96, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePattern"});
	stdlib_Debug.assert(path != "",null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 97, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePattern"});
	stdlib_Debug.assert(path != ".",null,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 98, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "processFilePattern"});
	if(StringTools.endsWith(path,".*")) {
		callb(haxe_io_Path.withoutExtension(path));
		var base = haxe_io_Path.withoutDirectory(haxe_io_Path.withoutExtension(path));
		var dir = haxe_io_Path.directory(path);
		if(fileSystem.exists(dir)) {
			var _g = 0;
			var _g1 = fileSystem.readDirectory(dir);
			while(_g < _g1.length) {
				var file = _g1[_g];
				++_g;
				if(StringTools.startsWith(file,base + ".")) {
					callb(dir + "/" + file);
				}
			}
		}
	} else if(StringTools.endsWith(path,"/*") || StringTools.endsWith(path,"\\*") || StringTools.endsWith(path,"/*.*") || StringTools.endsWith(path,"\\*.*")) {
		var dir = haxe_io_Path.directory(path);
		if(fileSystem.exists(dir)) {
			var _g = 0;
			var _g1 = fileSystem.readDirectory(dir);
			while(_g < _g1.length) {
				var file = _g1[_g];
				++_g;
				callb(dir + "/" + file);
			}
		}
	} else {
		callb(path);
	}
};
nanofl_ide_sys_tools_FileSystemTools.absolutePath = function(fileSystem,relPath) {
	if(haxe_io_Path.isAbsolute(relPath)) {
		return relPath;
	}
	return haxe_io_Path.join([fileSystem.getCwd(),relPath]);
};
nanofl_ide_sys_tools_FileSystemTools.deleteDirectoryRecursively = function(fileSystem,dirPath) {
	if(fileSystem.exists(dirPath)) {
		var _g = 0;
		var _g1 = fileSystem.readDirectory(dirPath);
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			fileSystem.deleteAny(dirPath + "/" + file);
		}
	}
};
nanofl_ide_sys_tools_FileSystemTools.deleteAny = function(fileSystem,path) {
	if(fileSystem.exists(path)) {
		if(fileSystem.isDirectory(path)) {
			nanofl_ide_sys_tools_FileSystemTools.deleteDirectoryRecursively(fileSystem,path);
		} else {
			fileSystem.deleteFile(path);
		}
	}
};
nanofl_ide_sys_tools_FileSystemTools.deleteAnyByPattern = function(fileSystem,path) {
	nanofl_ide_sys_tools_FileSystemTools.processFilePattern(fileSystem,path,function(path) {
		nanofl_ide_sys_tools_FileSystemTools.deleteAny(fileSystem,path);
	});
};
nanofl_ide_sys_tools_FileSystemTools.renameByPattern = function(fileSystem,srcPath,destPath) {
	nanofl_ide_sys_tools_FileSystemTools.processFilePatternPair(fileSystem,srcPath,destPath,function(srcPath,destPath) {
		if(fileSystem.exists(srcPath)) {
			nanofl_ide_sys_tools_FileSystemTools.log("rename " + srcPath + " => " + destPath,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 181, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "renameByPattern"});
			fileSystem.rename(srcPath,destPath);
		}
	});
};
nanofl_ide_sys_tools_FileSystemTools.copyAny = function(fileSystem,srcPath,destPath) {
	nanofl_ide_sys_tools_FileSystemTools.log("copyAny " + srcPath + " => " + destPath,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 189, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "copyAny"});
	if(fileSystem.isDirectory(srcPath)) {
		var files = fileSystem.readDirectory(srcPath);
		var _g = 0;
		while(_g < files.length) {
			var file = files[_g];
			++_g;
			nanofl_ide_sys_tools_FileSystemTools.copyAny(fileSystem,srcPath + "/" + file,destPath + "/" + file);
		}
	} else {
		fileSystem.copyFile(srcPath,destPath);
	}
};
nanofl_ide_sys_tools_FileSystemTools.copyByPattern = function(fileSystem,srcPath,destPath) {
	nanofl_ide_sys_tools_FileSystemTools.processFilePatternPair(fileSystem,srcPath,destPath,function(srcPath,destPath) {
		nanofl_ide_sys_tools_FileSystemTools.copyAny(fileSystem,srcPath,destPath);
	});
};
nanofl_ide_sys_tools_FileSystemTools.syncDirectory = function(fileSystem,src,dest) {
	nanofl_ide_sys_tools_FileSystemTools.log("syncDirectory " + src + " => " + dest,{ fileName : "src/nanofl/ide/sys/tools/FileSystemTools.hx", lineNumber : 215, className : "nanofl.ide.sys.tools.FileSystemTools", methodName : "syncDirectory"});
	nanofl_ide_sys_tools_FileSystemTools.deleteAny(fileSystem,dest);
	nanofl_ide_sys_tools_FileSystemTools.copyAny(fileSystem,src,dest);
};
nanofl_ide_sys_tools_FileSystemTools.copyLibraryFiles = function(fileSystem,srcLibraryDir,relativePaths,destLibraryDir) {
	var _g = 0;
	while(_g < relativePaths.length) {
		var relativePath = relativePaths[_g];
		++_g;
		nanofl_ide_sys_tools_FileSystemTools.copyAny(fileSystem,srcLibraryDir + "/" + relativePath,destLibraryDir + "/" + relativePath);
	}
};
nanofl_ide_sys_tools_FileSystemTools.getDocumentLastModified = function(fileSystem,path) {
	var r = fileSystem.getLastModified(path);
	var libraryDir = haxe_io_Path.join([haxe_io_Path.directory(path),"library"]);
	if(fileSystem.exists(libraryDir) && fileSystem.isDirectory(libraryDir)) {
		r = nanofl_ide_sys_tools_FileSystemTools.maxDate(r,fileSystem.getLastModified(libraryDir));
		nanofl_ide_sys_tools_FileSystemTools.findFiles(fileSystem,libraryDir,function(file) {
			r = nanofl_ide_sys_tools_FileSystemTools.maxDate(r,fileSystem.getLastModified(file));
		},function(dir) {
			r = nanofl_ide_sys_tools_FileSystemTools.maxDate(r,fileSystem.getLastModified(dir));
			return true;
		});
	}
	return r;
};
nanofl_ide_sys_tools_FileSystemTools.nativePath = function(fileSystem,path) {
	return StringTools.replace(path,"/","\\");
};
nanofl_ide_sys_tools_FileSystemTools.maxDate = function(a,b) {
	if(a != null) {
		if(a.getTime() > b.getTime()) {
			return a;
		} else {
			return b;
		}
	} else {
		return b;
	}
};
nanofl_ide_sys_tools_FileSystemTools.log = function(v,infos) {
};
var stdlib_Debug = function() { };
stdlib_Debug.__name__ = "stdlib.Debug";
stdlib_Debug.assert = function(e,message,pos) {
	if(!e) {
		if(message == null) {
			message = "error";
		} else if(Reflect.isFunction(message)) {
			message = message();
		}
		var s = "ASSERT " + Std.string(message) + " in " + pos.fileName + " at line " + pos.lineNumber;
		throw new Error(s);
	}
};
var stdlib_Uuid = function() { };
stdlib_Uuid.__name__ = "stdlib.Uuid";
stdlib_Uuid.newUuid = function() {
	var timeF = new Date().getTime();
	var time = timeF - 268435455. * (timeF / 268435455 | 0) | 0;
	var uuid = StringTools.hex(stdlib_Uuid.counter++,8) + "-" + StringTools.hex(timeF / 65536 | 0,8) + "-" + StringTools.hex(time % 65536,8) + "-" + StringTools.hex(Std.random(65536),4) + "-" + StringTools.hex(Std.random(65536),4);
	return uuid;
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
nanofl_ide_sys_Clipboard.__rtti = "<class path=\"nanofl.ide.sys.Clipboard\" params=\"\" interface=\"1\">\n\t<hasText public=\"1\" set=\"method\"><f a=\"\"><x path=\"Bool\"/></f></hasText>\n\t<hasImage public=\"1\" set=\"method\"><f a=\"\"><x path=\"Bool\"/></f></hasImage>\n\t<readText public=\"1\" set=\"method\"><f a=\"\"><c path=\"String\"/></f></readText>\n\t<readImageAsPngBytes public=\"1\" set=\"method\"><f a=\"\"><c path=\"haxe.io.Bytes\"/></f></readImageAsPngBytes>\n\t<writeText public=\"1\" set=\"method\"><f a=\"data\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></writeText>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Clipboard\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Dialogs.__rtti = "<class path=\"nanofl.ide.sys.Dialogs\" params=\"\" interface=\"1\">\n\t<showOpenDialog public=\"1\" set=\"method\"><f a=\"options\">\n\t<t path=\"nanofl.ide.sys.ShowOpenDialogOptions\"/>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.ShowOpenDialogResult\"/></c>\n</f></showOpenDialog>\n\t<showSaveDialog public=\"1\" set=\"method\"><f a=\"options\">\n\t<t path=\"nanofl.ide.sys.ShowSaveDialogOptions\"/>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.ShowSaveDialogResult\"/></c>\n</f></showSaveDialog>\n\t<showMessageBox public=\"1\" set=\"method\"><f a=\"options\">\n\t<t path=\"nanofl.ide.sys.ShowMessageBoxOptions\"/>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.ShowMessageBoxResult\"/></c>\n</f></showMessageBox>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Dialogs\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Environment.__rtti = "<class path=\"nanofl.ide.sys.Environment\" params=\"\" interface=\"1\">\n\t<get public=\"1\" set=\"method\"><f a=\"name\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></get>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Environment\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_FileSystem.__rtti = "<class path=\"nanofl.ide.sys.FileSystem\" params=\"\" interface=\"1\">\n\t<getCwd public=\"1\" set=\"method\"><f a=\"\"><c path=\"String\"/></f></getCwd>\n\t<exists public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n</f></exists>\n\t<rename public=\"1\" set=\"method\"><f a=\"oldPath:newPath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></rename>\n\t<isDirectory public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n</f></isDirectory>\n\t<createDirectory public=\"1\" set=\"method\"><f a=\"dirPath\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></createDirectory>\n\t<deleteFile public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></deleteFile>\n\t<deleteEmptyDirectory public=\"1\" set=\"method\"><f a=\"dirPath\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></deleteEmptyDirectory>\n\t<deleteDirectoryRecursively public=\"1\" set=\"method\"><f a=\"dirPath\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></deleteDirectoryRecursively>\n\t<readDirectory public=\"1\" set=\"method\"><f a=\"dirPath\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n</f></readDirectory>\n\t<getContent public=\"1\" set=\"method\"><f a=\"filePath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></getContent>\n\t<saveContent public=\"1\" set=\"method\"><f a=\"filePath:text:?append\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n\t<x path=\"Void\"/>\n</f></saveContent>\n\t<getBinary public=\"1\" set=\"method\"><f a=\"filePath\">\n\t<c path=\"String\"/>\n\t<c path=\"haxe.io.Bytes\"/>\n</f></getBinary>\n\t<saveBinary public=\"1\" set=\"method\"><f a=\"filePath:data\">\n\t<c path=\"String\"/>\n\t<c path=\"haxe.io.Bytes\"/>\n\t<x path=\"Void\"/>\n</f></saveBinary>\n\t<getLastModified public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<c path=\"Date\"/>\n</f></getLastModified>\n\t<getSize public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<x path=\"Int\"/>\n</f></getSize>\n\t<copyFile public=\"1\" set=\"method\"><f a=\"srcPath:destPath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></copyFile>\n\t<getTempFilePath public=\"1\" set=\"method\"><f a=\"?extensionPrefixedWithDot\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></getTempFilePath>\n\t<findFiles public=\"1\" set=\"method\"><f a=\"dirPath:?onFile:?onDir\">\n\t<c path=\"String\"/>\n\t<f a=\"\">\n\t\t<c path=\"String\"/>\n\t\t<x path=\"Void\"/>\n\t</f>\n\t<f a=\"\">\n\t\t<c path=\"String\"/>\n\t\t<x path=\"Bool\"/>\n\t</f>\n\t<x path=\"Void\"/>\n</f></findFiles>\n\t<findFilesInDirectoriesFilteredByRegex public=\"1\" set=\"method\"><f a=\"dirs:reFilter\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n</f></findFilesInDirectoriesFilteredByRegex>\n\t<processFilePatternPair public=\"1\" set=\"method\">\n\t\t<f a=\"oldName:newName:callb\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"String\"/>\n\t\t\t<f a=\":\">\n\t\t\t\t<c path=\"String\"/>\n\t\t\t\t<c path=\"String\"/>\n\t\t\t\t<x path=\"Void\"/>\n\t\t\t</f>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<haxe_doc>* Process each file, matched by oldName pattern (args example: oldName=\"folderA/myFileNameA.*\", newName=\"folderB/myFileNameB.*\").</haxe_doc>\n\t</processFilePatternPair>\n\t<processFilePattern public=\"1\" set=\"method\">\n\t\t<f a=\"path:callb\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<f a=\"\">\n\t\t\t\t<c path=\"String\"/>\n\t\t\t\t<x path=\"Void\"/>\n\t\t\t</f>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<haxe_doc>* Process each file, matched by path pattern (path example: \"folder/myFileName.*\").</haxe_doc>\n\t</processFilePattern>\n\t<absolutePath public=\"1\" set=\"method\"><f a=\"relPath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></absolutePath>\n\t<deleteAny public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></deleteAny>\n\t<deleteAnyByPattern public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></deleteAnyByPattern>\n\t<renameByPattern public=\"1\" set=\"method\"><f a=\"srcPath:destPath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></renameByPattern>\n\t<copyAny public=\"1\" set=\"method\"><f a=\"srcPath:destPath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></copyAny>\n\t<copyByPattern public=\"1\" set=\"method\"><f a=\"srcPath:destPath\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></copyByPattern>\n\t<syncDirectory public=\"1\" set=\"method\"><f a=\"src:dest\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></syncDirectory>\n\t<copyLibraryFiles public=\"1\" set=\"method\"><f a=\"srcLibraryDir:relativePaths:destLibraryDir\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></copyLibraryFiles>\n\t<getDocumentLastModified public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<c path=\"Date\"/>\n</f></getDocumentLastModified>\n\t<nativePath public=\"1\" set=\"method\"><f a=\"path\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></nativePath>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"FileSystem\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Folders.__rtti = "<class path=\"nanofl.ide.sys.Folders\" params=\"\" interface=\"1\">\n\t<get_application public=\"1\" set=\"method\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta>\n\t\t\t<m n=\":compilerGenerated\"/>\n\t\t\t<m n=\":noCompletion\"/>\n\t\t</meta>\n\t</get_application>\n\t<get_tools public=\"1\" set=\"method\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta>\n\t\t\t<m n=\":compilerGenerated\"/>\n\t\t\t<m n=\":noCompletion\"/>\n\t\t</meta>\n\t</get_tools>\n\t<get_temp public=\"1\" set=\"method\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta>\n\t\t\t<m n=\":compilerGenerated\"/>\n\t\t\t<m n=\":noCompletion\"/>\n\t\t</meta>\n\t</get_temp>\n\t<get_plugins public=\"1\" set=\"method\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta>\n\t\t\t<m n=\":compilerGenerated\"/>\n\t\t\t<m n=\":noCompletion\"/>\n\t\t</meta>\n\t</get_plugins>\n\t<get_userDocuments public=\"1\" set=\"method\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta>\n\t\t\t<m n=\":compilerGenerated\"/>\n\t\t\t<m n=\":noCompletion\"/>\n\t\t</meta>\n\t</get_userDocuments>\n\t<get_unsavedDocuments public=\"1\" set=\"method\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta>\n\t\t\t<m n=\":compilerGenerated\"/>\n\t\t\t<m n=\":noCompletion\"/>\n\t\t</meta>\n\t</get_unsavedDocuments>\n\t<application public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></application>\n\t<tools public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></tools>\n\t<temp public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></temp>\n\t<plugins public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></plugins>\n\t<userDocuments public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></userDocuments>\n\t<unsavedDocuments public=\"1\" get=\"accessor\" set=\"null\"><c path=\"String\"/></unsavedDocuments>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Folders\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Fonts.__rtti = "<class path=\"nanofl.ide.sys.Fonts\" params=\"\" interface=\"1\">\n\t<getFontNames public=\"1\" set=\"method\"><f a=\"\"><c path=\"Array\"><c path=\"String\"/></c></f></getFontNames>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Fonts\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_HttpUtils.__rtti = "<class path=\"nanofl.ide.sys.HttpUtils\" params=\"\" interface=\"1\">\n\t<requestGet public=\"1\" set=\"method\"><f a=\"url:?headers\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><a>\n\t<value><c path=\"String\"/></value>\n\t<name><c path=\"String\"/></name>\n</a></c>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.HttpRequestResult\"/></c>\n</f></requestGet>\n\t<requestPost public=\"1\" set=\"method\"><f a=\"url:?headers:?fields:?files\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><a>\n\t<value><c path=\"String\"/></value>\n\t<name><c path=\"String\"/></name>\n</a></c>\n\t<c path=\"Array\"><a>\n\t<value><c path=\"String\"/></value>\n\t<name><c path=\"String\"/></name>\n</a></c>\n\t<c path=\"Array\"><a>\n\t<path><c path=\"String\"/></path>\n\t<name><c path=\"String\"/></name>\n</a></c>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.HttpRequestResult\"/></c>\n</f></requestPost>\n\t<downloadFile public=\"1\" set=\"method\"><f a=\"url:destFilePath:?progress\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<f a=\"\">\n\t\t<x path=\"Float\"/>\n\t\t<x path=\"Void\"/>\n\t</f>\n\t<c path=\"js.lib.Promise\"><x path=\"Bool\"/></c>\n</f></downloadFile>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"HttpUtils\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_MainProcess.__rtti = "<class path=\"nanofl.ide.sys.MainProcess\" params=\"\" interface=\"1\">\n\t<getCommandLineArgs public=\"1\" set=\"method\"><f a=\"\"><c path=\"Array\"><c path=\"String\"/></c></f></getCommandLineArgs>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"MainProcess\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_ProcessManager.__rtti = "<class path=\"nanofl.ide.sys.ProcessManager\" params=\"\" interface=\"1\">\n\t<run public=\"1\" set=\"method\"><f a=\"filePath:args:blocking:?directory:?env\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<x path=\"Bool\"/>\n\t<c path=\"String\"/>\n\t<d><c path=\"String\"/></d>\n\t<x path=\"Int\"/>\n</f></run>\n\t<runCaptured public=\"1\" set=\"method\"><f a=\"filePath:args:?directory:?env:?input\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<c path=\"String\"/>\n\t<d><c path=\"String\"/></d>\n\t<c path=\"String\"/>\n\t<t path=\"nanofl.ide.sys.ProcessResult\"/>\n</f></runCaptured>\n\t<runPipedStdIn public=\"1\" set=\"method\"><f a=\"filePath:args:directory:env:getDataForStdIn\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<c path=\"String\"/>\n\t<d><c path=\"String\"/></d>\n\t<f a=\"\"><c path=\"js.lib.Promise\"><c path=\"js.lib.ArrayBuffer\"/></c></f>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.ProcessResult\"/></c>\n</f></runPipedStdIn>\n\t<runPipedStdOut public=\"1\" set=\"method\"><f a=\"filePath:args:directory:env:input:chunkSize:processChunk\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<c path=\"String\"/>\n\t<d><c path=\"String\"/></d>\n\t<c path=\"String\"/>\n\t<x path=\"Int\"/>\n\t<f a=\"\">\n\t\t<c path=\"js.lib.Uint8Array\"/>\n\t\t<x path=\"Void\"/>\n\t</f>\n\t<c path=\"js.lib.Promise\"><t path=\"nanofl.ide.sys.ProcessResult\"/></c>\n</f></runPipedStdOut>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"ProcessManager\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Shell.__rtti = "<class path=\"nanofl.ide.sys.Shell\" params=\"\" interface=\"1\">\n\t<openInExternalBrowser public=\"1\" set=\"method\"><f a=\"url\">\n\t<c path=\"String\"/>\n\t<x path=\"Void\"/>\n</f></openInExternalBrowser>\n\t<runWithEditor public=\"1\" set=\"method\"><f a=\"document\">\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n</f></runWithEditor>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Shell\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Uploader.__rtti = "<class path=\"nanofl.ide.sys.Uploader\" params=\"\">\n\t<log set=\"method\" line=\"52\" static=\"1\"><f a=\"v:?infos\">\n\t<d/>\n\t<x path=\"Null\"><t path=\"haxe.PosInfos\"/></x>\n\t<x path=\"Void\"/>\n</f></log>\n\t<fileSystem><c path=\"nanofl.ide.sys.FileSystem\"/></fileSystem>\n\t<saveUploadedFiles public=\"1\" set=\"method\" line=\"19\"><f a=\"files:destDir\">\n\t<c path=\"Array\"><c path=\"js.html.File\"/></c>\n\t<c path=\"String\"/>\n\t<c path=\"js.lib.Promise\"><a/></c>\n</f></saveUploadedFiles>\n\t<new public=\"1\" set=\"method\" line=\"14\"><f a=\"fileSystem\">\n\t<c path=\"nanofl.ide.sys.FileSystem\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Uploader\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_VideoUtils.__rtti = "<class path=\"nanofl.ide.sys.VideoUtils\" params=\"\" interface=\"1\">\n\t<getFileInfo public=\"1\" set=\"method\"><f a=\"filePath\">\n\t<c path=\"String\"/>\n\t<t path=\"nanofl.ide.sys.VideoFileInfo\"/>\n</f></getFileInfo>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"VideoUtils\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_WebServerUtils.__rtti = "<class path=\"nanofl.ide.sys.WebServerUtils\" params=\"\" interface=\"1\">\n\t<start public=\"1\" set=\"method\">\n\t\t<f a=\"directoryToServe\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<haxe_doc>Start a web server process.\n        Several web servers can be started simultaneously.\n        Returns `uid`.</haxe_doc>\n\t</start>\n\t<getAddress public=\"1\" set=\"method\">\n\t\t<f a=\"uid\">\n\t\t\t<x path=\"Int\"/>\n\t\t\t<c path=\"String\"/>\n\t\t</f>\n\t\t<haxe_doc>Returns: URL like \"http://127.0.0.1:9990\".</haxe_doc>\n\t</getAddress>\n\t<kill public=\"1\" set=\"method\">\n\t\t<f a=\"uid\">\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<haxe_doc>Kill specified web server process.</haxe_doc>\n\t</kill>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"WebServerUtils\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_Zip.__rtti = "<class path=\"nanofl.ide.sys.Zip\" params=\"\" interface=\"1\">\n\t<compress public=\"1\" set=\"method\"><f a=\"srcDir:destZip:?relFilePaths\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<x path=\"Bool\"/>\n</f></compress>\n\t<decompress public=\"1\" set=\"method\"><f a=\"srcZip:destDir:?elevated\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n\t<x path=\"Bool\"/>\n</f></decompress>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"><e>\"Zip\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_sys_node_NodeWebServerUtils.start_uid = 0;
stdlib_Uuid.counter = 0;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
