// Generated by Haxe 4.3.3
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var haxe_SysTools = function() { };
haxe_SysTools.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	} else {
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var argument1 = argument;
	if(!new EReg("^(/)?[^ \t/\\\\\"]+$","").match(argument1)) {
		var result_b = "";
		var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "" || argument1.indexOf("/") > 0;
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument1,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += Std.string(bs);
					result_b += Std.string(bs);
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument1 = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument1,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument1;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_StringIterator = function(s) {
	this.s = s;
};
haxe_iterators_StringIterator.__name__ = true;
haxe_iterators_StringIterator.prototype = {
	__class__: haxe_iterators_StringIterator
};
var haxe_iterators_StringKeyValueIterator = function(s) {
	this.s = s;
};
haxe_iterators_StringKeyValueIterator.__name__ = true;
haxe_iterators_StringKeyValueIterator.prototype = {
	__class__: haxe_iterators_StringKeyValueIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var nanofl_ide_keyboard_Keyboard = $hx_exports["Keyboard"] = function(commands) {
	this.disabled = 0;
	this.keymap = [];
	var _gthis = this;
	this.onCtrlButtonChange = new stdlib_Event(this);
	this.onShiftButtonChange = new stdlib_Event(this);
	this.onAltButtonChange = new stdlib_Event(this);
	this.onKeymapChange = new stdlib_Event(this);
	this.onKeyDown = new stdlib_Event(this);
	this.commands = commands;
	jQuery(window.document).keydown(function(e) {
		nanofl_ide_keyboard_Keyboard.log("keydown");
		if(!_gthis.isInputActive() && !nanofl_ide_keyboard_ShortcutTools.equ(nanofl_ide_keyboard_ShortcutTools.ctrl(nanofl_ide_keyboard_Keys.X),e) && !nanofl_ide_keyboard_ShortcutTools.equ(nanofl_ide_keyboard_ShortcutTools.ctrl(nanofl_ide_keyboard_Keys.C),e) && !nanofl_ide_keyboard_ShortcutTools.equ(nanofl_ide_keyboard_ShortcutTools.ctrl(nanofl_ide_keyboard_Keys.V),e)) {
			nanofl_ide_keyboard_Keyboard.log("keydown: disabled = " + _gthis.disabled);
			if(_gthis.disabled <= 0) {
				_gthis.processKeyDown(e);
			}
		}
	}).keyup(function(e) {
		if(_gthis.disabled > 0) {
			return;
		}
		if(e.keyCode == nanofl_ide_keyboard_Keys.SHIFT) {
			_gthis.onShiftButtonChange.call({ pressed : false});
		}
		if(e.keyCode == nanofl_ide_keyboard_Keys.CTRL) {
			_gthis.onCtrlButtonChange.call({ pressed : false});
		}
	});
};
nanofl_ide_keyboard_Keyboard.__name__ = true;
nanofl_ide_keyboard_Keyboard.log = function(v) {
};
nanofl_ide_keyboard_Keyboard.prototype = {
	enable: function() {
		this.disabled--;
	}
	,disable: function() {
		this.disabled++;
	}
	,processKeyDown: function(e) {
		var _gthis = this;
		switch(e.keyCode) {
		case nanofl_ide_keyboard_Keys.ALT:
			this.onAltButtonChange.call({ pressed : true});
			break;
		case nanofl_ide_keyboard_Keys.CTRL:
			this.onCtrlButtonChange.call({ pressed : true});
			break;
		case nanofl_ide_keyboard_Keys.SHIFT:
			this.onShiftButtonChange.call({ pressed : true});
			break;
		default:
			var processed = false;
			this.onKeyDown.call({ altKey : e.altKey, ctrlKey : e.ctrlKey, shiftKey : e.shiftKey, processShortcut : function(filter,whenVars) {
				var r = _gthis.processShortcut(e,_gthis.keymap,filter,whenVars);
				if(r) {
					processed = true;
				}
				return r;
			}});
			if(processed) {
				e.preventDefault();
				e.stopPropagation();
			}
		}
	}
	,setKeymap: function(keymap) {
		this.keymap = keymap;
		var _g = 0;
		var result = new Array(keymap.length);
		var _g1 = 0;
		var _g2 = keymap.length;
		while(_g1 < _g2) {
			var i = _g1++;
			result[i] = keymap[i].command;
		}
		var _g1 = result;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			this.commands.validateCommand(command);
		}
		this.onKeymapChange.call(null);
	}
	,getShortcutsForCommand: function(command) {
		this.commands.validateCommand(command);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.getKeymap();
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.command == command) {
				_g.push(v);
			}
		}
		var _this = _g;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].shortcut;
		}
		return result;
	}
	,getKeymap: function() {
		var r = this.keymap.slice();
		r.push({ shortcut : "Ctrl+X", command : "document.cut"});
		r.push({ shortcut : "Ctrl+C", command : "document.copy"});
		r.push({ shortcut : "Ctrl+V", command : "document.paste"});
		r.push({ shortcut : "Ctrl+X", command : "editor.cut"});
		r.push({ shortcut : "Ctrl+C", command : "editor.copy"});
		r.push({ shortcut : "Ctrl+V", command : "editor.paste"});
		r.push({ shortcut : "Ctrl+X", command : "library.cut"});
		r.push({ shortcut : "Ctrl+C", command : "library.copy"});
		r.push({ shortcut : "Ctrl+V", command : "library.paste"});
		r.push({ shortcut : "Ctrl+X", command : "timeline.cut"});
		r.push({ shortcut : "Ctrl+C", command : "timeline.copy"});
		r.push({ shortcut : "Ctrl+V", command : "timeline.paste"});
		return r;
	}
	,isInputActive: function() {
		var activeElement = window.document.activeElement;
		if(activeElement == null) {
			return false;
		}
		if(["textarea","input","select"].indexOf(activeElement.nodeName.toLowerCase()) == -1) {
			return false;
		}
		return true;
	}
	,processShortcut: function(e,keymap,filter,whenVars) {
		var _gthis = this;
		var tmp = filter;
		filter = tmp != null ? tmp : "";
		var shortcut = nanofl_ide_keyboard_ShortcutTools.toString(e);
		nanofl_ide_keyboard_Keyboard.log("shortcut = " + shortcut);
		var km = Lambda.find(keymap,function(x) {
			if(x.shortcut == shortcut && (filter == "" || filter == x.command.split(".")[0])) {
				return _gthis.testWhen(x.when,whenVars);
			} else {
				return false;
			}
		});
		if(km == null) {
			return false;
		}
		return this.commands.run(km.command);
	}
	,testWhen: function(when,vars) {
		if(when == null || stdlib_StringTools.trim(when) == "") {
			return true;
		}
		var editor = vars.editor;
		var library = vars.library;
		return eval(when);
	}
	,__class__: nanofl_ide_keyboard_Keyboard
};
var nanofl_ide_keyboard_Keys = $hx_exports["Keys"] = function() { };
nanofl_ide_keyboard_Keys.__name__ = true;
nanofl_ide_keyboard_Keys.toString = function(code) {
	switch(code) {
	case nanofl_ide_keyboard_Keys.A:
		return "A";
	case nanofl_ide_keyboard_Keys.ADD:
		return "Num+";
	case nanofl_ide_keyboard_Keys.ALT:
		return "Alt";
	case nanofl_ide_keyboard_Keys.B:
		return "B";
	case nanofl_ide_keyboard_Keys.BACKSPACE:
		return "Backspace";
	case nanofl_ide_keyboard_Keys.BACK_SLASH:
		return "\\";
	case nanofl_ide_keyboard_Keys.C:
		return "C";
	case nanofl_ide_keyboard_Keys.CAPS_LOCK:
		return "CapsLock";
	case nanofl_ide_keyboard_Keys.CLOSE_BRAKET:
		return "]";
	case nanofl_ide_keyboard_Keys.COMMA:
		return ",";
	case nanofl_ide_keyboard_Keys.CTRL:
		return "Ctrl";
	case nanofl_ide_keyboard_Keys.D:
		return "D";
	case nanofl_ide_keyboard_Keys.DASH:
		return "-";
	case nanofl_ide_keyboard_Keys.DECIMAL_POINT:
		return "Num.";
	case nanofl_ide_keyboard_Keys.DELETE:
		return "Delete";
	case nanofl_ide_keyboard_Keys.DIGIT_0:
		return "0";
	case nanofl_ide_keyboard_Keys.DIGIT_1:
		return "1";
	case nanofl_ide_keyboard_Keys.DIGIT_2:
		return "2";
	case nanofl_ide_keyboard_Keys.DIGIT_3:
		return "3";
	case nanofl_ide_keyboard_Keys.DIGIT_4:
		return "4";
	case nanofl_ide_keyboard_Keys.DIGIT_5:
		return "5";
	case nanofl_ide_keyboard_Keys.DIGIT_6:
		return "6";
	case nanofl_ide_keyboard_Keys.DIGIT_7:
		return "7";
	case nanofl_ide_keyboard_Keys.DIGIT_8:
		return "8";
	case nanofl_ide_keyboard_Keys.DIGIT_9:
		return "9";
	case nanofl_ide_keyboard_Keys.DIVIDE:
		return "Num/";
	case nanofl_ide_keyboard_Keys.DOWN_ARROW:
		return "Down";
	case nanofl_ide_keyboard_Keys.E:
		return "E";
	case nanofl_ide_keyboard_Keys.END:
		return "End";
	case nanofl_ide_keyboard_Keys.ENTER:
		return "Enter";
	case nanofl_ide_keyboard_Keys.EQUAL_SIGN:
		return "=";
	case nanofl_ide_keyboard_Keys.ESCAPE:
		return "Escape";
	case nanofl_ide_keyboard_Keys.F:
		return "F";
	case nanofl_ide_keyboard_Keys.F1:
		return "F1";
	case nanofl_ide_keyboard_Keys.F10:
		return "F10";
	case nanofl_ide_keyboard_Keys.F11:
		return "F11";
	case nanofl_ide_keyboard_Keys.F12:
		return "F12";
	case nanofl_ide_keyboard_Keys.F2:
		return "F2";
	case nanofl_ide_keyboard_Keys.F3:
		return "F3";
	case nanofl_ide_keyboard_Keys.F4:
		return "F4";
	case nanofl_ide_keyboard_Keys.F5:
		return "F5";
	case nanofl_ide_keyboard_Keys.F6:
		return "F6";
	case nanofl_ide_keyboard_Keys.F7:
		return "F7";
	case nanofl_ide_keyboard_Keys.F8:
		return "F8";
	case nanofl_ide_keyboard_Keys.F9:
		return "F9";
	case nanofl_ide_keyboard_Keys.FORWARD_SLASH:
		return "/";
	case nanofl_ide_keyboard_Keys.G:
		return "G";
	case nanofl_ide_keyboard_Keys.GRAVE_ACCENT:
		return "GRAVE_ACCENT";
	case nanofl_ide_keyboard_Keys.H:
		return "H";
	case nanofl_ide_keyboard_Keys.HOME:
		return "Home";
	case nanofl_ide_keyboard_Keys.I:
		return "I";
	case nanofl_ide_keyboard_Keys.INSERT:
		return "Insert";
	case nanofl_ide_keyboard_Keys.J:
		return "J";
	case nanofl_ide_keyboard_Keys.K:
		return "K";
	case nanofl_ide_keyboard_Keys.L:
		return "L";
	case nanofl_ide_keyboard_Keys.LEFT_ARROW:
		return "Left";
	case nanofl_ide_keyboard_Keys.LEFT_WINDOW_KEY:
		return "LeftWin";
	case nanofl_ide_keyboard_Keys.M:
		return "M";
	case nanofl_ide_keyboard_Keys.MULTIPLY:
		return "Num*";
	case nanofl_ide_keyboard_Keys.N:
		return "N";
	case nanofl_ide_keyboard_Keys.NUMPAD_0:
		return "Num0";
	case nanofl_ide_keyboard_Keys.NUMPAD_1:
		return "Num1";
	case nanofl_ide_keyboard_Keys.NUMPAD_2:
		return "Num2";
	case nanofl_ide_keyboard_Keys.NUMPAD_3:
		return "Num3";
	case nanofl_ide_keyboard_Keys.NUMPAD_4:
		return "Num4";
	case nanofl_ide_keyboard_Keys.NUMPAD_5:
		return "Num5";
	case nanofl_ide_keyboard_Keys.NUMPAD_6:
		return "Num6";
	case nanofl_ide_keyboard_Keys.NUMPAD_7:
		return "Num7";
	case nanofl_ide_keyboard_Keys.NUMPAD_8:
		return "Num8";
	case nanofl_ide_keyboard_Keys.NUMPAD_9:
		return "Num9";
	case nanofl_ide_keyboard_Keys.NUM_LOCK:
		return "NumLock";
	case nanofl_ide_keyboard_Keys.O:
		return "O";
	case nanofl_ide_keyboard_Keys.OPEN_BRACKET:
		return "[";
	case nanofl_ide_keyboard_Keys.P:
		return "P";
	case nanofl_ide_keyboard_Keys.PAGE_DOWN:
		return "PageDown";
	case nanofl_ide_keyboard_Keys.PAGE_UP:
		return "PageUp";
	case nanofl_ide_keyboard_Keys.PAUSE:
		return "Pause";
	case nanofl_ide_keyboard_Keys.PERIOD:
		return ".";
	case nanofl_ide_keyboard_Keys.Q:
		return "Q";
	case nanofl_ide_keyboard_Keys.R:
		return "R";
	case nanofl_ide_keyboard_Keys.RIGHT_ARROW:
		return "Right";
	case nanofl_ide_keyboard_Keys.RIGHT_WINDOW_KEY:
		return "RightWin";
	case nanofl_ide_keyboard_Keys.S:
		return "S";
	case nanofl_ide_keyboard_Keys.SCROLL_LOCK:
		return "ScrollLock";
	case nanofl_ide_keyboard_Keys.SELECT_KEY:
		return "Select";
	case nanofl_ide_keyboard_Keys.SEMICOLON:
		return ";";
	case nanofl_ide_keyboard_Keys.SHIFT:
		return "Shift";
	case nanofl_ide_keyboard_Keys.SINGLE_QUOTE:
		return "'";
	case nanofl_ide_keyboard_Keys.SPACEBAR:
		return "Space";
	case nanofl_ide_keyboard_Keys.SUBTRACT:
		return "Num-";
	case nanofl_ide_keyboard_Keys.T:
		return "T";
	case nanofl_ide_keyboard_Keys.TAB:
		return "Tab";
	case nanofl_ide_keyboard_Keys.U:
		return "U";
	case nanofl_ide_keyboard_Keys.UP_ARROW:
		return "Up";
	case nanofl_ide_keyboard_Keys.V:
		return "V";
	case nanofl_ide_keyboard_Keys.W:
		return "W";
	case nanofl_ide_keyboard_Keys.X:
		return "X";
	case nanofl_ide_keyboard_Keys.Y:
		return "Y";
	case nanofl_ide_keyboard_Keys.Z:
		return "Z";
	}
	return null;
};
var nanofl_ide_keyboard_ShortcutTools = $hx_exports["ShortcutTools"] = function() { };
nanofl_ide_keyboard_ShortcutTools.__name__ = true;
nanofl_ide_keyboard_ShortcutTools.equ = function(a,b) {
	if(a.keyCode == b.keyCode && a.ctrlKey == b.ctrlKey && a.shiftKey == b.shiftKey) {
		return a.altKey == b.altKey;
	} else {
		return false;
	}
};
nanofl_ide_keyboard_ShortcutTools.key = function(keyCode) {
	return { keyCode : keyCode};
};
nanofl_ide_keyboard_ShortcutTools.ctrl = function(keyCode) {
	return { keyCode : keyCode, ctrlKey : true};
};
nanofl_ide_keyboard_ShortcutTools.shift = function(keyCode) {
	return { keyCode : keyCode, shiftKey : true};
};
nanofl_ide_keyboard_ShortcutTools.alt = function(keyCode) {
	return { keyCode : keyCode, altKey : true};
};
nanofl_ide_keyboard_ShortcutTools.ctrlShift = function(keyCode) {
	return { keyCode : keyCode, ctrlKey : true, shiftKey : true};
};
nanofl_ide_keyboard_ShortcutTools.toString = function(e) {
	return (e.ctrlKey ? "Ctrl+" : "") + (e.shiftKey ? "Shift+" : "") + (e.altKey ? "Alt+" : "") + nanofl_ide_keyboard_Keys.toString(e.keyCode);
};
var stdlib_Event = function(target) {
	this.target = target;
	this.handlers = [];
};
stdlib_Event.__name__ = true;
stdlib_Event.prototype = {
	bind: function(handler) {
		this.handlers.push(handler);
	}
	,unbind: function(handler) {
		while(HxOverrides.remove(this.handlers,handler)) {
		}
	}
	,unbindAll: function() {
		this.handlers = [];
	}
	,call: function(args) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.apply(null,[this.target,args]);
		}
	}
	,__class__: stdlib_Event
};
var stdlib_LambdaArray = function() { };
stdlib_LambdaArray.__name__ = true;
stdlib_LambdaArray.addRange = function(arr,range) {
	var _g = 0;
	while(_g < range.length) {
		var e = range[_g];
		++_g;
		arr.push(e);
	}
};
stdlib_LambdaArray.insertRange = function(arr,pos,range) {
	var _g = 0;
	while(_g < range.length) {
		var e = range[_g];
		++_g;
		arr.splice(pos++,0,e);
	}
};
stdlib_LambdaArray.extract = function(arr,f) {
	var r = [];
	var i = 0;
	while(i < arr.length) if(f(arr[i])) {
		r.push(arr[i]);
		arr.splice(i,1);
	} else {
		++i;
	}
	return r;
};
stdlib_LambdaArray.spliceEx = function(arr,pos,len,replacement) {
	var r = arr.splice(pos,len != null ? len : arr.length - pos);
	if(replacement != null) {
		stdlib_LambdaArray.insertRange(arr,pos,replacement);
	}
	return r;
};
stdlib_LambdaArray.filterByType = function(arr,klass) {
	var _g = [];
	var _g1 = 0;
	var _g2 = arr;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(js_Boot.__instanceof(v,klass)) {
			_g.push(v);
		}
	}
	return _g;
};
stdlib_LambdaArray.distinct = function(arr,equFunc) {
	var r = [];
	if(equFunc == null) {
		var _g = 0;
		while(_g < arr.length) {
			var x = arr[_g];
			++_g;
			if(r.indexOf(x) == -1) {
				r.push(x);
			}
		}
	} else {
		var _g = 0;
		while(_g < arr.length) {
			var x = [arr[_g]];
			++_g;
			if(!Lambda.exists(r,(function(x) {
				return function(y) {
					return equFunc(x[0],y);
				};
			})(x))) {
				r.push(x[0]);
			}
		}
	}
	return r;
};
stdlib_LambdaArray.toMapManyInner = function(arr,keySelector,valueSelector) {
	var r = new Map();
	var _g = 0;
	while(_g < arr.length) {
		var item = arr[_g];
		++_g;
		var k = keySelector(item);
		if(r.has(k)) {
			r.get(k).push(valueSelector(item));
		} else {
			r.set(k,[valueSelector(item)]);
		}
	}
	return r;
};
stdlib_LambdaArray.toMapOneInner = function(arr,keySelector,valueSelector) {
	var r = new Map();
	var _g = 0;
	while(_g < arr.length) {
		var item = arr[_g];
		++_g;
		r.set(keySelector(item),valueSelector(item));
	}
	return r;
};
var stdlib_LambdaIterable = function() { };
stdlib_LambdaIterable.__name__ = true;
stdlib_LambdaIterable.findIndex = function(it,f) {
	var n = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return n;
		}
		++n;
	}
	return -1;
};
stdlib_LambdaIterable.findLastIndex = function(it,f) {
	var r = -1;
	var n = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			r = n;
		}
		++n;
	}
	return r;
};
stdlib_LambdaIterable.sorted = function(it,cmp) {
	var r = Lambda.array(it);
	r.sort(cmp != null ? cmp : Reflect.compare);
	return r;
};
stdlib_LambdaIterable.reversed = function(it) {
	var r = Lambda.array(it);
	r.reverse();
	return r;
};
stdlib_LambdaIterable.filterByType = function(it,klass) {
	var r = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(js_Boot.__instanceof(x1,klass)) {
			r.push(x1);
		}
	}
	return r;
};
stdlib_LambdaIterable.skipWhile = function(it,f) {
	var iterator = $getIterator(it);
	while(iterator.hasNext() && f(iterator.next())) {
	}
	var r = [];
	while(iterator.hasNext()) r.push(iterator.next());
	return r;
};
var stdlib_LambdaIterator = function() { };
stdlib_LambdaIterator.__name__ = true;
stdlib_LambdaIterator.array = function(it) {
	var r = [];
	var e = it;
	while(e.hasNext()) {
		var e1 = e.next();
		r.push(e1);
	}
	return r;
};
stdlib_LambdaIterator.indexOf = function(it,elem) {
	var r = 0;
	while(it.hasNext()) {
		if(it.next() == elem) {
			return r;
		}
		++r;
	}
	return -1;
};
stdlib_LambdaIterator.map = function(it,conv) {
	var r = [];
	var e = it;
	while(e.hasNext()) {
		var e1 = e.next();
		r.push(conv(e1));
	}
	return r;
};
stdlib_LambdaIterator.filter = function(it,pred) {
	var r = [];
	var e = it;
	while(e.hasNext()) {
		var e1 = e.next();
		if(pred(e1)) {
			r.push(e1);
		}
	}
	return r;
};
stdlib_LambdaIterator.exists = function(it,pred) {
	var e = it;
	while(e.hasNext()) {
		var e1 = e.next();
		if(pred(e1)) {
			return true;
		}
	}
	return false;
};
stdlib_LambdaIterator.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = it;
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = it;
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
stdlib_LambdaIterator.findIndex = function(it,f) {
	var n = 0;
	var x = it;
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return n;
		}
		++n;
	}
	return -1;
};
stdlib_LambdaIterator.findLastIndex = function(it,f) {
	var r = -1;
	var n = 0;
	var x = it;
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			r = n;
		}
		++n;
	}
	return r;
};
stdlib_LambdaIterator.sorted = function(it,cmp) {
	var r = stdlib_LambdaIterator.array(it);
	r.sort(cmp != null ? cmp : Reflect.compare);
	return r;
};
stdlib_LambdaIterator.join = function(it,sep) {
	var r_b = "";
	var isFirst = true;
	var x = it;
	while(x.hasNext()) {
		var x1 = x.next();
		if(!isFirst) {
			r_b += sep == null ? "null" : "" + sep;
		} else {
			isFirst = false;
		}
		r_b += Std.string(Std.string(x1));
	}
	return r_b;
};
var stdlib_Std = function() { };
stdlib_Std.__name__ = true;
stdlib_Std.isOfType = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
stdlib_Std.string = function(s) {
	return Std.string(s);
};
stdlib_Std.int = function(x) {
	return x | 0;
};
stdlib_Std.random = function(x) {
	return Std.random(x);
};
stdlib_Std.parseInt = function(x,defaultValue) {
	if(x != null) {
		if(new EReg("^\\s*[+-]?\\s*((?:0x[0-9a-fA-F]{1,7})|(?:\\d{1,9}))\\s*$","").match(x)) {
			return Std.parseInt(x);
		} else {
			return defaultValue;
		}
	} else {
		return defaultValue;
	}
};
stdlib_Std.parseFloat = function(x,defaultValue) {
	if(x == null) {
		return defaultValue;
	}
	if(new EReg("^\\s*[+-]?\\s*\\d{1,20}(?:[.]\\d+)?(?:e[+-]?\\d{1,20})?\\s*$","").match(x)) {
		var r = parseFloat(x);
		if(!isNaN(r)) {
			return r;
		} else {
			return defaultValue;
		}
	}
	return defaultValue;
};
stdlib_Std.downcast = function(obj,_) {
	return obj;
};
stdlib_Std.bool = function(v) {
	if(v != false && v != null && v != 0 && v != "" && v != "0") {
		if(typeof(v) == "string") {
			if((js_Boot.__cast(v , String)).toLowerCase() != "false" && (js_Boot.__cast(v , String)).toLowerCase() != "off") {
				return (js_Boot.__cast(v , String)).toLowerCase() != "null";
			} else {
				return false;
			}
		} else {
			return true;
		}
	} else {
		return false;
	}
};
stdlib_Std.parseValue = function(x) {
	var value = x;
	var valueLC = value != null ? value.toLowerCase() : null;
	var parsedValue;
	if(valueLC == "true") {
		value = true;
	} else if(valueLC == "false") {
		value = false;
	} else if(valueLC == "null") {
		value = null;
	} else {
		parsedValue = stdlib_Std.parseInt(value);
		if(parsedValue != null) {
			value = parsedValue;
		} else {
			parsedValue = stdlib_Std.parseFloat(value);
			if(parsedValue != null) {
				value = parsedValue;
			}
		}
	}
	return value;
};
stdlib_Std.hash = function(obj) {
	var r = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(obj);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		r.h[key] = Reflect.field(obj,key);
	}
	return r;
};
stdlib_Std.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
stdlib_Std.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
stdlib_Std.abs = function(x) {
	if(x >= 0) {
		return x;
	} else {
		return -x;
	}
};
stdlib_Std.sign = function(n) {
	if(n > 0) {
		return 1;
	} else if(n < 0) {
		return -1;
	} else {
		return 0;
	}
};
var stdlib_StringTools = function() { };
stdlib_StringTools.__name__ = true;
stdlib_StringTools.ltrim = function(s,chars) {
	if(chars == null) {
		return StringTools.ltrim(s);
	}
	while(s.length > 0 && chars.indexOf(HxOverrides.substr(s,0,1)) >= 0) s = HxOverrides.substr(s,1,null);
	return s;
};
stdlib_StringTools.rtrim = function(s,chars) {
	if(chars == null) {
		return StringTools.rtrim(s);
	}
	while(s.length > 0 && chars.indexOf(HxOverrides.substr(s,s.length - 1,1)) >= 0) s = HxOverrides.substr(s,0,s.length - 1);
	return s;
};
stdlib_StringTools.trim = function(s,chars) {
	if(chars == null) {
		return StringTools.trim(s);
	}
	return stdlib_StringTools.rtrim(stdlib_StringTools.ltrim(s,chars),chars);
};
stdlib_StringTools.hexdec = function(s) {
	return stdlib_Std.parseInt("0x" + s);
};
stdlib_StringTools.addcslashes = function(s) {
	return new EReg("['\"\t\r\n\\\\]","g").map(s,function(re) {
		return "\\" + re.matched(0);
	});
};
stdlib_StringTools.stripTags = function(str,allowedTags) {
	if(allowedTags == null) {
		allowedTags = "";
	}
	var allowedTagsArray = [];
	if(allowedTags != "") {
		var re = new EReg("[a-zA-Z0-9]+","i");
		var pos = 0;
		while(re.matchSub(allowedTags,pos)) {
			allowedTagsArray.push(re.matched(0));
			pos = re.matchedPos().pos + re.matchedPos().len;
		}
	}
	var re = new EReg("</?[\\S][^>]*>","g");
	str = re.map(str,function(_) {
		var html = re.matched(0);
		var allowed = false;
		if(allowedTagsArray.length > 0) {
			var htmlLC = html.toLowerCase();
			var _g = 0;
			while(_g < allowedTagsArray.length) {
				var allowedTag = allowedTagsArray[_g];
				++_g;
				if(StringTools.startsWith(htmlLC,"<" + allowedTag + ">") || StringTools.startsWith(htmlLC,"<" + allowedTag + " ") || StringTools.startsWith(htmlLC,"</" + allowedTag)) {
					allowed = true;
					break;
				}
			}
		}
		if(allowed) {
			return html;
		} else {
			return "";
		}
	});
	return str;
};
stdlib_StringTools.regexEscape = function(s) {
	var _this_r = new RegExp("([\\-\\[\\]/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])","g".split("u").join(""));
	return s.replace(_this_r,"\\$1");
};
stdlib_StringTools.jsonEscape = function(s) {
	if(s == null) {
		return "null";
	}
	var r = "\"";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 9:
			r += "\\t";
			break;
		case 10:
			r += "\\n";
			break;
		case 13:
			r += "\\r";
			break;
		case 34:
			r += "\\\"";
			break;
		case 92:
			r += "\\\\";
			break;
		default:
			if(c2 < 32) {
				r += "\\u" + StringTools.hex(c2,4);
			} else {
				r += String.fromCodePoint(c2);
			}
		}
	}
	r += "\"";
	return r;
};
stdlib_StringTools.isNullOrEmpty = function(s) {
	if(s != null) {
		return s == "";
	} else {
		return true;
	}
};
stdlib_StringTools.capitalize = function(s) {
	if(s == "") {
		return s;
	} else {
		return HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,null);
	}
};
stdlib_StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
stdlib_StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
stdlib_StringTools.htmlEscape = function(s,quotes) {
	return StringTools.htmlEscape(s,quotes);
};
stdlib_StringTools.htmlUnescape = function(s) {
	return StringTools.htmlUnescape(s);
};
stdlib_StringTools.contains = function(s,value) {
	return s.indexOf(value) != -1;
};
stdlib_StringTools.startsWith = function(s,start) {
	return StringTools.startsWith(s,start);
};
stdlib_StringTools.endsWith = function(s,end) {
	return StringTools.endsWith(s,end);
};
stdlib_StringTools.isSpace = function(s,pos) {
	return StringTools.isSpace(s,pos);
};
stdlib_StringTools.lpad = function(s,c,l) {
	return StringTools.lpad(s,c,l);
};
stdlib_StringTools.rpad = function(s,c,l) {
	return StringTools.rpad(s,c,l);
};
stdlib_StringTools.replace = function(s,sub,by) {
	return StringTools.replace(s,sub,by);
};
stdlib_StringTools.hex = function(n,digits) {
	return StringTools.hex(n,digits);
};
stdlib_StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
stdlib_StringTools.unsafeCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
stdlib_StringTools.iterator = function(s) {
	return new haxe_iterators_StringIterator(s);
};
stdlib_StringTools.keyValueIterator = function(s) {
	return new haxe_iterators_StringKeyValueIterator(s);
};
stdlib_StringTools.isEof = function(c) {
	return c != c;
};
stdlib_StringTools.quoteUnixArg = function(argument) {
	return StringTools.quoteUnixArg(argument);
};
stdlib_StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	return StringTools.quoteWinArg(argument,escapeMetaCharacters);
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
var q = window.jQuery;
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
nanofl_ide_keyboard_Keyboard.__rtti = "<class path=\"nanofl.ide.keyboard.Keyboard\" params=\"\">\n\t<log set=\"method\" line=\"180\" static=\"1\"><f a=\"v\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></log>\n\t<commands final=\"1\"><t path=\"nanofl.ide.keyboard.Commands\"/></commands>\n\t<keymap public=\"1\" expr=\"new Array&lt;KeymapItem&gt;()\" line=\"15\">\n\t\t<c path=\"Array\"><t path=\"nanofl.ide.keyboard.KeymapItem\"/></c>\n\t\t<meta><m n=\":value\"><e><![CDATA[new Array<KeymapItem>()]]></e></m></meta>\n\t</keymap>\n\t<onCtrlButtonChange final=\"1\" public=\"1\"><c path=\"stdlib.Event\"><a><pressed><x path=\"Bool\"/></pressed></a></c></onCtrlButtonChange>\n\t<onShiftButtonChange final=\"1\" public=\"1\"><c path=\"stdlib.Event\"><a><pressed><x path=\"Bool\"/></pressed></a></c></onShiftButtonChange>\n\t<onAltButtonChange final=\"1\" public=\"1\"><c path=\"stdlib.Event\"><a><pressed><x path=\"Bool\"/></pressed></a></c></onAltButtonChange>\n\t<onKeymapChange final=\"1\" public=\"1\"><c path=\"stdlib.Event\"><a/></c></onKeymapChange>\n\t<onKeyDown final=\"1\" public=\"1\"><c path=\"stdlib.Event\"><t path=\"nanofl.ide.keyboard.KeyDownEvent\"/></c></onKeyDown>\n\t<disabled expr=\"0\" line=\"24\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>0</e></m></meta>\n\t</disabled>\n\t<enable public=\"1\" set=\"method\" line=\"25\"><f a=\"\"><x path=\"Void\"/></f></enable>\n\t<disable public=\"1\" set=\"method\" line=\"26\"><f a=\"\"><x path=\"Void\"/></f></disable>\n\t<processKeyDown set=\"method\" line=\"72\"><f a=\"e\">\n\t<t path=\"js.JqEvent\"/>\n\t<x path=\"Void\"/>\n</f></processKeyDown>\n\t<setKeymap public=\"1\" set=\"method\" line=\"109\"><f a=\"keymap\">\n\t<c path=\"Array\"><t path=\"nanofl.ide.keyboard.KeymapItem\"/></c>\n\t<x path=\"Void\"/>\n</f></setKeymap>\n\t<getShortcutsForCommand public=\"1\" set=\"method\" line=\"121\"><f a=\"command\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n</f></getShortcutsForCommand>\n\t<getKeymap set=\"method\" line=\"127\"><f a=\"\"><c path=\"Array\"><t path=\"nanofl.ide.keyboard.KeymapItem\"/></c></f></getKeymap>\n\t<isInputActive set=\"method\" line=\"150\"><f a=\"\"><x path=\"Bool\"/></f></isInputActive>\n\t<processShortcut set=\"method\" line=\"158\"><f a=\"e:keymap:filter:whenVars\">\n\t<t path=\"nanofl.ide.keyboard.Shortcut\"/>\n\t<c path=\"Array\"><t path=\"nanofl.ide.keyboard.KeymapItem\"/></c>\n\t<c path=\"String\"/>\n\t<t path=\"nanofl.ide.keyboard.WhenVars\"/>\n\t<x path=\"Bool\"/>\n</f></processShortcut>\n\t<testWhen set=\"method\" line=\"171\"><f a=\"when:vars\">\n\t<c path=\"String\"/>\n\t<t path=\"nanofl.ide.keyboard.WhenVars\"/>\n\t<x path=\"Bool\"/>\n</f></testWhen>\n\t<new public=\"1\" set=\"method\" line=\"29\"><f a=\"commands\">\n\t<t path=\"nanofl.ide.keyboard.Commands\"/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":expose\"><e>\"Keyboard\"</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
nanofl_ide_keyboard_Keys.BACKSPACE = 8;
nanofl_ide_keyboard_Keys.TAB = 9;
nanofl_ide_keyboard_Keys.ENTER = 13;
nanofl_ide_keyboard_Keys.SHIFT = 16;
nanofl_ide_keyboard_Keys.CTRL = 17;
nanofl_ide_keyboard_Keys.ALT = 18;
nanofl_ide_keyboard_Keys.PAUSE = 19;
nanofl_ide_keyboard_Keys.CAPS_LOCK = 20;
nanofl_ide_keyboard_Keys.ESCAPE = 27;
nanofl_ide_keyboard_Keys.SPACEBAR = 32;
nanofl_ide_keyboard_Keys.PAGE_UP = 33;
nanofl_ide_keyboard_Keys.PAGE_DOWN = 34;
nanofl_ide_keyboard_Keys.END = 35;
nanofl_ide_keyboard_Keys.HOME = 36;
nanofl_ide_keyboard_Keys.LEFT_ARROW = 37;
nanofl_ide_keyboard_Keys.UP_ARROW = 38;
nanofl_ide_keyboard_Keys.RIGHT_ARROW = 39;
nanofl_ide_keyboard_Keys.DOWN_ARROW = 40;
nanofl_ide_keyboard_Keys.INSERT = 45;
nanofl_ide_keyboard_Keys.DELETE = 46;
nanofl_ide_keyboard_Keys.LEFT_WINDOW_KEY = 91;
nanofl_ide_keyboard_Keys.RIGHT_WINDOW_KEY = 92;
nanofl_ide_keyboard_Keys.SELECT_KEY = 93;
nanofl_ide_keyboard_Keys.NUMPAD_0 = 96;
nanofl_ide_keyboard_Keys.NUMPAD_1 = 97;
nanofl_ide_keyboard_Keys.NUMPAD_2 = 98;
nanofl_ide_keyboard_Keys.NUMPAD_3 = 99;
nanofl_ide_keyboard_Keys.NUMPAD_4 = 100;
nanofl_ide_keyboard_Keys.NUMPAD_5 = 101;
nanofl_ide_keyboard_Keys.NUMPAD_6 = 102;
nanofl_ide_keyboard_Keys.NUMPAD_7 = 103;
nanofl_ide_keyboard_Keys.NUMPAD_8 = 104;
nanofl_ide_keyboard_Keys.NUMPAD_9 = 105;
nanofl_ide_keyboard_Keys.MULTIPLY = 106;
nanofl_ide_keyboard_Keys.ADD = 107;
nanofl_ide_keyboard_Keys.SUBTRACT = 109;
nanofl_ide_keyboard_Keys.DECIMAL_POINT = 110;
nanofl_ide_keyboard_Keys.DIVIDE = 111;
nanofl_ide_keyboard_Keys.F1 = 112;
nanofl_ide_keyboard_Keys.F2 = 113;
nanofl_ide_keyboard_Keys.F3 = 114;
nanofl_ide_keyboard_Keys.F4 = 115;
nanofl_ide_keyboard_Keys.F5 = 116;
nanofl_ide_keyboard_Keys.F6 = 117;
nanofl_ide_keyboard_Keys.F7 = 118;
nanofl_ide_keyboard_Keys.F8 = 119;
nanofl_ide_keyboard_Keys.F9 = 120;
nanofl_ide_keyboard_Keys.F10 = 121;
nanofl_ide_keyboard_Keys.F11 = 122;
nanofl_ide_keyboard_Keys.F12 = 123;
nanofl_ide_keyboard_Keys.NUM_LOCK = 144;
nanofl_ide_keyboard_Keys.SCROLL_LOCK = 145;
nanofl_ide_keyboard_Keys.SEMICOLON = 186;
nanofl_ide_keyboard_Keys.EQUAL_SIGN = 187;
nanofl_ide_keyboard_Keys.COMMA = 188;
nanofl_ide_keyboard_Keys.DASH = 189;
nanofl_ide_keyboard_Keys.PERIOD = 190;
nanofl_ide_keyboard_Keys.FORWARD_SLASH = 191;
nanofl_ide_keyboard_Keys.GRAVE_ACCENT = 192;
nanofl_ide_keyboard_Keys.OPEN_BRACKET = 219;
nanofl_ide_keyboard_Keys.BACK_SLASH = 220;
nanofl_ide_keyboard_Keys.CLOSE_BRAKET = 221;
nanofl_ide_keyboard_Keys.SINGLE_QUOTE = 222;
nanofl_ide_keyboard_Keys.DIGIT_0 = 48;
nanofl_ide_keyboard_Keys.DIGIT_1 = 49;
nanofl_ide_keyboard_Keys.DIGIT_2 = 50;
nanofl_ide_keyboard_Keys.DIGIT_3 = 51;
nanofl_ide_keyboard_Keys.DIGIT_4 = 52;
nanofl_ide_keyboard_Keys.DIGIT_5 = 53;
nanofl_ide_keyboard_Keys.DIGIT_6 = 54;
nanofl_ide_keyboard_Keys.DIGIT_7 = 55;
nanofl_ide_keyboard_Keys.DIGIT_8 = 56;
nanofl_ide_keyboard_Keys.DIGIT_9 = 57;
nanofl_ide_keyboard_Keys.A = 65;
nanofl_ide_keyboard_Keys.B = 66;
nanofl_ide_keyboard_Keys.C = 67;
nanofl_ide_keyboard_Keys.D = 68;
nanofl_ide_keyboard_Keys.E = 69;
nanofl_ide_keyboard_Keys.F = 70;
nanofl_ide_keyboard_Keys.G = 71;
nanofl_ide_keyboard_Keys.H = 72;
nanofl_ide_keyboard_Keys.I = 73;
nanofl_ide_keyboard_Keys.J = 74;
nanofl_ide_keyboard_Keys.K = 75;
nanofl_ide_keyboard_Keys.L = 76;
nanofl_ide_keyboard_Keys.M = 77;
nanofl_ide_keyboard_Keys.N = 78;
nanofl_ide_keyboard_Keys.O = 79;
nanofl_ide_keyboard_Keys.P = 80;
nanofl_ide_keyboard_Keys.Q = 81;
nanofl_ide_keyboard_Keys.R = 82;
nanofl_ide_keyboard_Keys.S = 83;
nanofl_ide_keyboard_Keys.T = 84;
nanofl_ide_keyboard_Keys.U = 85;
nanofl_ide_keyboard_Keys.V = 86;
nanofl_ide_keyboard_Keys.W = 87;
nanofl_ide_keyboard_Keys.X = 88;
nanofl_ide_keyboard_Keys.Y = 89;
nanofl_ide_keyboard_Keys.Z = 90;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
