// This file is autogenerated by NanoFL

/// <reference types='nanofl-ts' />

export namespace base
{
	export class McBucket extends nanofl.MovieClip
	{
		constructor() {
			super(nanofl.Player.library.getItem("bucket"));
		}
		get mcNeck() { return this.getChildByName("mcNeck") as nanofl.MovieClip }
		get tfLabel() { return this.getChildByName("tfLabel") as nanofl.TextField }
		get mcForeColor() { return this.getChildByName("mcForeColor") as nanofl.MovieClip }
		get mcBox() { return this.getChildByName("mcBox") as nanofl.MovieClip }
	}

	export class Game extends nanofl.MovieClip
	{
		constructor() {
			super(nanofl.Player.library.getItem("game"));
		}
	}

	export class MusicButton extends nanofl.MovieClip
	{
		constructor() {
			super(nanofl.Player.library.getItem("musicButton"));
		}
	}

	export class Scene extends nanofl.MovieClip
	{
		constructor() {
			super(nanofl.Player.library.getItem("scene"));
		}
		get btGotoGame() { return this.getChildByName("btGotoGame") as nanofl.Button }
		get btRules() { return this.getChildByName("btRules") as nanofl.Button }
		get btGotoOrigin() { return this.getChildByName("btGotoOrigin") as nanofl.Button }
		get tfLevel() { return this.getChildByName("tfLevel") as nanofl.TextField }
		get mcTrash() { return this.getChildByName("mcTrash") as nanofl.MovieClip }
		get game() { return this.getChildByName("game") as Game }
		get tfTask() { return this.getChildByName("tfTask") as nanofl.TextField }
		get mcTap() { return this.getChildByName("mcTap") as nanofl.MovieClip }
	}
}

export class Sounds
{
	static bucket(interrupt?:any, delay?:number, offset?:number, loop?:number, volume?:number, pan?:number) : createjs.AbstractSoundInstance { return createjs.Sound.play("bucket", interrupt, delay, offset, loop, volume, pan) }
	static music(interrupt?:any, delay?:number, offset?:number, loop?:number, volume?:number, pan?:number) : createjs.AbstractSoundInstance { return createjs.Sound.play("music", interrupt, delay, offset, loop, volume, pan) }
	static tap(interrupt?:any, delay?:number, offset?:number, loop?:number, volume?:number, pan?:number) : createjs.AbstractSoundInstance { return createjs.Sound.play("tap", interrupt, delay, offset, loop, volume, pan) }
	static trash(interrupt?:any, delay?:number, offset?:number, loop?:number, volume?:number, pan?:number) : createjs.AbstractSoundInstance { return createjs.Sound.play("trash", interrupt, delay, offset, loop, volume, pan) }
	static water(interrupt?:any, delay?:number, offset?:number, loop?:number, volume?:number, pan?:number) : createjs.AbstractSoundInstance { return createjs.Sound.play("water", interrupt, delay, offset, loop, volume, pan) }
}
