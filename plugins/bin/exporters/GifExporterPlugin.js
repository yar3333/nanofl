// Generated by Haxe 4.3.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var GifExporterPlugin = function() {
	this.properties = [{ type : "float", name : "framerate", label : "Framerate", description : "Set to 0 to use document framerate.", defaultValue : 0.0, units : "fps", minValue : 0, maxValue : 120},{ type : "info", label : "Select dithering mode. See <a href='https://ffmpeg.org/ffmpeg-filters.html#paletteuse'>ffmpeg-filters#paletteuse</a>."},{ type : "list", name : "dither", label : "Dither", description : "", defaultValue : "sierra2_4a", values : ["bayer","heckbert","floyd_steinberg","sierra2","sierra2_4a","sierra3","burkes","atkinson","none"]}];
	this.fileDefaultExtension = "gif";
	this.fileFilterExtensions = ["gif"];
	this.fileFilterDescription = "GIF image (*.gif)";
	this.menuItemIcon = "custom-icon-film";
	this.menuItemName = "GIF image (*.gif)";
	this.name = "GifExporter";
};
GifExporterPlugin.__name__ = true;
GifExporterPlugin.main = function() {
	nanofl.ide.plugins.ExporterPlugins.register(new GifExporterPlugin());
};
GifExporterPlugin.imageDataToRgbArray = function(imageData,outBuffer) {
	var pixIn = imageData.data;
	var pIn = 0;
	var pOut = 0;
	var _g = 0;
	var _g1 = imageData.width * imageData.height;
	while(_g < _g1) {
		var _ = _g++;
		outBuffer[pOut++] = pixIn[pIn++];
		outBuffer[pOut++] = pixIn[pIn++];
		outBuffer[pOut++] = pixIn[pIn++];
		++pIn;
	}
};
GifExporterPlugin.prototype = {
	exportDocument: function(api,args) {
		if(api.fileSystem.exists(args.destFilePath)) {
			api.fileSystem.deleteFile(args.destFilePath);
		}
		var srcFramerate = args.documentProperties.framerate;
		var destFramerate;
		if(args.params.framerate != 0) {
			var tmp = args.originalFilePath;
			destFramerate = haxe_io_Path.extension(tmp != null ? tmp : "").toLowerCase() == "gif";
		} else {
			destFramerate = true;
		}
		var destFramerate1 = destFramerate ? args.documentProperties.framerate : args.params.framerate;
		var width = args.documentProperties.width;
		var height = args.documentProperties.height;
		var dataOut = new Uint8Array(width * height * 3);
		var totalFrames = args.library.getSceneItem().getTotalFrames();
		var sceneFramesIterator = args.library.getSceneFramesIterator(args.documentProperties,true);
		var ffmpegArgs = ["-f","rawvideo","-pixel_format","rgb24","-video_size",width + "x" + height,"-framerate",srcFramerate + "","-i","pipe:0","-vf",(destFramerate1 != srcFramerate ? "fps=" + destFramerate1 + "," : "") + "split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse=dither=" + Std.string(args.params.dither),args.destFilePath];
		$global.console.log("FFmpeg: ",ffmpegArgs);
		var frameNum = 0;
		try {
			return api.processManager.runPipedStdIn(api.folders.get_tools() + "/ffmpeg.exe",ffmpegArgs,null,null,function(process) {
				if(!sceneFramesIterator.hasNext() || args.wantToCancel) {
					return Promise.resolve(null);
				}
				frameNum += 1;
				args.setProgressPercent(Math.round(frameNum * 100 / totalFrames));
				return sceneFramesIterator.next().then(function(ctx) {
					GifExporterPlugin.imageDataToRgbArray(ctx.getImageData(0,0,width,height),dataOut);
					return dataOut.buffer;
				});
			}).then(function(r) {
				return r.code == 0;
			});
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			$global.console.error(e);
			return Promise.resolve(false);
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
GifExporterPlugin.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
