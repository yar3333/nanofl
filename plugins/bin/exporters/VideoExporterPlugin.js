// Generated by Haxe 4.3.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	nanofl.ide.plugins.ExporterPlugins.register(new WebmVideoExporterPlugin());
};
Math.__name__ = true;
var VideoExporter = function() { };
VideoExporter.__name__ = true;
VideoExporter.run = function(fileSystem,processManager,folders,destFilePath,documentProperties,library) {
	if(fileSystem.exists(destFilePath)) {
		fileSystem.deleteFile(destFilePath);
	}
	var args = ["-f","rawvideo","-pixel_format","rgb24","-video_size",documentProperties.width + "x" + documentProperties.height,"-framerate",documentProperties.framerate + "","-i","pipe:0",destFilePath];
	var canvas = window.document.createElement("canvas");
	canvas.width = documentProperties.width;
	canvas.height = documentProperties.height;
	var totalFrames = library.getSceneItem().getTotalFrames();
	var frameNum = 0;
	var dataOut = new Uint8Array(canvas.width * canvas.height * 3);
	var stage = new nanofl.Stage(canvas);
	var scene = library.getSceneInstance().createDisplayObject(null);
	stage.addChild(scene);
	var backColor = VideoExporter.hexToRgb(documentProperties.backgroundColor);
	var ctx = canvas.getContext("2d",{ willReadFrequently : true});
	try {
		return processManager.runPipedStdIn(folders.get_tools() + "/ffmpeg.exe",args,null,null,function() {
			if(frameNum >= totalFrames) {
				return null;
			}
			stage.update();
			var dataIn = ctx.getImageData(0,0,canvas.width,canvas.height).data;
			var pIn = 0;
			var pOut = 0;
			var i = 0;
			while(i < canvas.height) {
				var j = 0;
				while(j < canvas.width) {
					var r = dataIn[pIn++];
					var g = dataIn[pIn++];
					var b = dataIn[pIn++];
					var a = dataIn[pIn++];
					var fa = a / 255.0;
					dataOut[pOut++] = Math.round((1 - fa) * backColor.r + fa * r);
					var fa1 = a / 255.0;
					dataOut[pOut++] = Math.round((1 - fa1) * backColor.g + fa1 * g);
					var fa2 = a / 255.0;
					dataOut[pOut++] = Math.round((1 - fa2) * backColor.b + fa2 * b);
					++j;
				}
				++i;
			}
			frameNum += 1;
			if(frameNum < totalFrames) {
				scene.advance();
			}
			return dataOut.buffer;
		}).then(function(r) {
			return r.code == 0;
		});
	} catch( _g ) {
		var e = haxe_Exception.caught(_g);
		$global.console.error(e);
		return Promise.resolve(false);
	}
};
VideoExporter.applyAlpha = function(fore,a,back) {
	var fa = a / 255.0;
	return Math.round((1 - fa) * back + fa * fore);
};
VideoExporter.hexToRgb = function(hex) {
	var re = new EReg("^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$","i");
	var result = re.match(hex);
	if(result) {
		return { r : parseInt(re.matched(1),16), g : parseInt(re.matched(2),16), b : parseInt(re.matched(3),16)};
	} else {
		return null;
	}
};
var WebmVideoExporterPlugin = function() {
	this.properties = null;
	this.fileDefaultExtension = "mp4";
	this.fileFilterExtensions = ["mp4"];
	this.fileFilterDescription = "MP4 Video (*.mp4)";
	this.menuItemIcon = "custom-icon-film";
	this.menuItemName = "MP4 Video (*.mp4)";
	this.name = "Mp4VideoExporter";
};
WebmVideoExporterPlugin.__name__ = true;
WebmVideoExporterPlugin.prototype = {
	exportDocument: function(api,params,srcFilePath,destFilePath,documentProperties,library) {
		VideoExporter.run(api.fileSystem,api.processManager,api.folders,destFilePath,documentProperties,library);
		return true;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
